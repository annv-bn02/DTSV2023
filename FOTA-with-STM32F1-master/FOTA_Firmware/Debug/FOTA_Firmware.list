
FOTA_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08011800  08011800  00001800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  0801190c  0801190c  0000190c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08014520  08014520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014624  08014624  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08014624  08014624  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014624  08014624  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014624  08014624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014628  08014628  00004628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801462c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030e0  20000010  08014638  00010010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200030f0  08014638  000130f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078d5  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb7  00000000  00000000  0001790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  000194c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00019ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016447  00000000  00000000  0001a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cc3  00000000  00000000  000308bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebf5  00000000  00000000  00039582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  000b81cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801190c <__do_global_dtors_aux>:
 801190c:	b510      	push	{r4, lr}
 801190e:	4c05      	ldr	r4, [pc, #20]	; (8011924 <__do_global_dtors_aux+0x18>)
 8011910:	7823      	ldrb	r3, [r4, #0]
 8011912:	b933      	cbnz	r3, 8011922 <__do_global_dtors_aux+0x16>
 8011914:	4b04      	ldr	r3, [pc, #16]	; (8011928 <__do_global_dtors_aux+0x1c>)
 8011916:	b113      	cbz	r3, 801191e <__do_global_dtors_aux+0x12>
 8011918:	4804      	ldr	r0, [pc, #16]	; (801192c <__do_global_dtors_aux+0x20>)
 801191a:	f3af 8000 	nop.w
 801191e:	2301      	movs	r3, #1
 8011920:	7023      	strb	r3, [r4, #0]
 8011922:	bd10      	pop	{r4, pc}
 8011924:	20000010 	.word	0x20000010
 8011928:	00000000 	.word	0x00000000
 801192c:	08014508 	.word	0x08014508

08011930 <frame_dummy>:
 8011930:	b508      	push	{r3, lr}
 8011932:	4b03      	ldr	r3, [pc, #12]	; (8011940 <frame_dummy+0x10>)
 8011934:	b11b      	cbz	r3, 801193e <frame_dummy+0xe>
 8011936:	4903      	ldr	r1, [pc, #12]	; (8011944 <frame_dummy+0x14>)
 8011938:	4803      	ldr	r0, [pc, #12]	; (8011948 <frame_dummy+0x18>)
 801193a:	f3af 8000 	nop.w
 801193e:	bd08      	pop	{r3, pc}
 8011940:	00000000 	.word	0x00000000
 8011944:	20000014 	.word	0x20000014
 8011948:	08014508 	.word	0x08014508

0801194c <HAL_UARTEx_RxEventCallback>:
uint8_t dataBuffer[MAXSIZE];
static uint32_t GetPage(uint32_t Address);
uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords);

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801194c:	b5b0      	push	{r4, r5, r7, lr}
 801194e:	b092      	sub	sp, #72	; 0x48
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a30      	ldr	r2, [pc, #192]	; (8011a20 <HAL_UARTEx_RxEventCallback+0xd4>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d15a      	bne.n	8011a18 <HAL_UARTEx_RxEventCallback+0xcc>
	{
		uint32_t wordCnt = (Size / 4) + ((Size % 4) != 0);
 8011962:	887b      	ldrh	r3, [r7, #2]
 8011964:	089b      	lsrs	r3, r3, #2
 8011966:	b29b      	uxth	r3, r3
 8011968:	461a      	mov	r2, r3
 801196a:	887b      	ldrh	r3, [r7, #2]
 801196c:	f003 0303 	and.w	r3, r3, #3
 8011970:	b29b      	uxth	r3, r3
 8011972:	2b00      	cmp	r3, #0
 8011974:	bf14      	ite	ne
 8011976:	2301      	movne	r3, #1
 8011978:	2300      	moveq	r3, #0
 801197a:	b2db      	uxtb	r3, r3
 801197c:	4413      	add	r3, r2
 801197e:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t bootState = 0x0u;
 8011980:	2300      	movs	r3, #0
 8011982:	643b      	str	r3, [r7, #64]	; 0x40
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)dataBuffer, wordCnt) == 0x0u)
 8011984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011986:	4927      	ldr	r1, [pc, #156]	; (8011a24 <HAL_UARTEx_RxEventCallback+0xd8>)
 8011988:	4827      	ldr	r0, [pc, #156]	; (8011a28 <HAL_UARTEx_RxEventCallback+0xdc>)
 801198a:	f000 fcbc 	bl	8012306 <HAL_CRC_Calculate>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d124      	bne.n	80119de <HAL_UARTEx_RxEventCallback+0x92>
		{
			uint8_t CRC_respond[] = "Receive firmware successfully!\r\nUpdating firmware\r\n";
 8011994:	4b25      	ldr	r3, [pc, #148]	; (8011a2c <HAL_UARTEx_RxEventCallback+0xe0>)
 8011996:	f107 040c 	add.w	r4, r7, #12
 801199a:	461d      	mov	r5, r3
 801199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119a8:	682b      	ldr	r3, [r5, #0]
 80119aa:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, CRC_respond, sizeof(CRC_respond), HAL_MAX_DELAY);
 80119ac:	f107 010c 	add.w	r1, r7, #12
 80119b0:	f04f 33ff 	mov.w	r3, #4294967295
 80119b4:	2234      	movs	r2, #52	; 0x34
 80119b6:	481e      	ldr	r0, [pc, #120]	; (8011a30 <HAL_UARTEx_RxEventCallback+0xe4>)
 80119b8:	f001 ff6b 	bl	8013892 <HAL_UART_Transmit>

			Flash_Write_Data(ADDRESS_START_CURRENT_FIRMWARE, (uint32_t *)dataBuffer, wordCnt);
 80119bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119be:	b29b      	uxth	r3, r3
 80119c0:	461a      	mov	r2, r3
 80119c2:	4918      	ldr	r1, [pc, #96]	; (8011a24 <HAL_UARTEx_RxEventCallback+0xd8>)
 80119c4:	481b      	ldr	r0, [pc, #108]	; (8011a34 <HAL_UARTEx_RxEventCallback+0xe8>)
 80119c6:	f000 f963 	bl	8011c90 <Flash_Write_Data>
			Flash_Write_Data(BOOT_STATUS_ADDRESS, &bootState, 1);
 80119ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80119ce:	2201      	movs	r2, #1
 80119d0:	4619      	mov	r1, r3
 80119d2:	4819      	ldr	r0, [pc, #100]	; (8011a38 <HAL_UARTEx_RxEventCallback+0xec>)
 80119d4:	f000 f95c 	bl	8011c90 <Flash_Write_Data>

			HAL_NVIC_SystemReset();
 80119d8:	f000 fc69 	bl	80122ae <HAL_NVIC_SystemReset>

			HAL_NVIC_SystemReset();
		}

	}
}
 80119dc:	e01c      	b.n	8011a18 <HAL_UARTEx_RxEventCallback+0xcc>
			uint8_t CRC_respond[] = "Receive firmware fail!\r\nCan't update firmware\r\n";
 80119de:	4b17      	ldr	r3, [pc, #92]	; (8011a3c <HAL_UARTEx_RxEventCallback+0xf0>)
 80119e0:	f107 040c 	add.w	r4, r7, #12
 80119e4:	461d      	mov	r5, r3
 80119e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80119f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart1, CRC_respond, sizeof(CRC_respond), HAL_MAX_DELAY);
 80119f6:	f107 010c 	add.w	r1, r7, #12
 80119fa:	f04f 33ff 	mov.w	r3, #4294967295
 80119fe:	2230      	movs	r2, #48	; 0x30
 8011a00:	480b      	ldr	r0, [pc, #44]	; (8011a30 <HAL_UARTEx_RxEventCallback+0xe4>)
 8011a02:	f001 ff46 	bl	8013892 <HAL_UART_Transmit>
			Flash_Write_Data(BOOT_STATUS_ADDRESS, &bootState, 1);
 8011a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	480a      	ldr	r0, [pc, #40]	; (8011a38 <HAL_UARTEx_RxEventCallback+0xec>)
 8011a10:	f000 f93e 	bl	8011c90 <Flash_Write_Data>
			HAL_NVIC_SystemReset();
 8011a14:	f000 fc4b 	bl	80122ae <HAL_NVIC_SystemReset>
}
 8011a18:	bf00      	nop
 8011a1a:	3748      	adds	r7, #72	; 0x48
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011a20:	40013800 	.word	0x40013800
 8011a24:	200000cc 	.word	0x200000cc
 8011a28:	2000003c 	.word	0x2000003c
 8011a2c:	08014520 	.word	0x08014520
 8011a30:	20000088 	.word	0x20000088
 8011a34:	08005000 	.word	0x08005000
 8011a38:	0801fc00 	.word	0x0801fc00
 8011a3c:	08014554 	.word	0x08014554

08011a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b09e      	sub	sp, #120	; 0x78
 8011a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t) 0x08011800;
 8011a46:	4b16      	ldr	r3, [pc, #88]	; (8011aa0 <main+0x60>)
 8011a48:	4a16      	ldr	r2, [pc, #88]	; (8011aa4 <main+0x64>)
 8011a4a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011a4c:	f000 fab6 	bl	8011fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011a50:	f000 f832 	bl	8011ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011a54:	f000 f8d2 	bl	8011bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8011a58:	f000 f8b2 	bl	8011bc0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8011a5c:	f000 f886 	bl	8011b6c <MX_USART1_UART_Init>
  MX_CRC_Init();
 8011a60:	f000 f870 	bl	8011b44 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t notification_str[] = "Send new firmware (file.bin) you want to update.\r\n\
 8011a64:	4a10      	ldr	r2, [pc, #64]	; (8011aa8 <main+0x68>)
 8011a66:	463b      	mov	r3, r7
 8011a68:	4611      	mov	r1, r2
 8011a6a:	2275      	movs	r2, #117	; 0x75
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f002 fd35 	bl	80144dc <memcpy>
								(The maximum size of firmware must be smaller than 12KB)\r\n";

  HAL_UART_Transmit(&huart1, notification_str, sizeof(notification_str), HAL_MAX_DELAY);
 8011a72:	4639      	mov	r1, r7
 8011a74:	f04f 33ff 	mov.w	r3, #4294967295
 8011a78:	2275      	movs	r2, #117	; 0x75
 8011a7a:	480c      	ldr	r0, [pc, #48]	; (8011aac <main+0x6c>)
 8011a7c:	f001 ff09 	bl	8013892 <HAL_UART_Transmit>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dataBuffer, MAXSIZE);
 8011a80:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8011a84:	490a      	ldr	r1, [pc, #40]	; (8011ab0 <main+0x70>)
 8011a86:	4809      	ldr	r0, [pc, #36]	; (8011aac <main+0x6c>)
 8011a88:	f001 ff95 	bl	80139b6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8011a8c:	4b09      	ldr	r3, [pc, #36]	; (8011ab4 <main+0x74>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <main+0x74>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f022 0204 	bic.w	r2, r2, #4
 8011a9a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8011a9c:	e7fe      	b.n	8011a9c <main+0x5c>
 8011a9e:	bf00      	nop
 8011aa0:	e000ed00 	.word	0xe000ed00
 8011aa4:	08011800 	.word	0x08011800
 8011aa8:	08014584 	.word	0x08014584
 8011aac:	20000088 	.word	0x20000088
 8011ab0:	200000cc 	.word	0x200000cc
 8011ab4:	20000044 	.word	0x20000044

08011ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b090      	sub	sp, #64	; 0x40
 8011abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011abe:	f107 0318 	add.w	r3, r7, #24
 8011ac2:	2228      	movs	r2, #40	; 0x28
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f002 fd16 	bl	80144f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011acc:	1d3b      	adds	r3, r7, #4
 8011ace:	2200      	movs	r2, #0
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	605a      	str	r2, [r3, #4]
 8011ad4:	609a      	str	r2, [r3, #8]
 8011ad6:	60da      	str	r2, [r3, #12]
 8011ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011ada:	2301      	movs	r3, #1
 8011adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011aec:	2302      	movs	r3, #2
 8011aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8011af6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8011afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011afc:	f107 0318 	add.w	r3, r7, #24
 8011b00:	4618      	mov	r0, r3
 8011b02:	f001 fa5f 	bl	8012fc4 <HAL_RCC_OscConfig>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d001      	beq.n	8011b10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8011b0c:	f000 f91a 	bl	8011d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011b10:	230f      	movs	r3, #15
 8011b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011b14:	2302      	movs	r3, #2
 8011b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011b22:	2300      	movs	r3, #0
 8011b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8011b26:	1d3b      	adds	r3, r7, #4
 8011b28:	2102      	movs	r1, #2
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f001 fcca 	bl	80134c4 <HAL_RCC_ClockConfig>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8011b36:	f000 f905 	bl	8011d44 <Error_Handler>
  }
}
 8011b3a:	bf00      	nop
 8011b3c:	3740      	adds	r7, #64	; 0x40
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011b48:	4b06      	ldr	r3, [pc, #24]	; (8011b64 <MX_CRC_Init+0x20>)
 8011b4a:	4a07      	ldr	r2, [pc, #28]	; (8011b68 <MX_CRC_Init+0x24>)
 8011b4c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8011b4e:	4805      	ldr	r0, [pc, #20]	; (8011b64 <MX_CRC_Init+0x20>)
 8011b50:	f000 fbbd 	bl	80122ce <HAL_CRC_Init>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8011b5a:	f000 f8f3 	bl	8011d44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8011b5e:	bf00      	nop
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	2000003c 	.word	0x2000003c
 8011b68:	40023000 	.word	0x40023000

08011b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011b70:	4b11      	ldr	r3, [pc, #68]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b72:	4a12      	ldr	r2, [pc, #72]	; (8011bbc <MX_USART1_UART_Init+0x50>)
 8011b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011b76:	4b10      	ldr	r3, [pc, #64]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011b7e:	4b0e      	ldr	r3, [pc, #56]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011b84:	4b0c      	ldr	r3, [pc, #48]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011b8a:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011b90:	4b09      	ldr	r3, [pc, #36]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b92:	220c      	movs	r2, #12
 8011b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011b96:	4b08      	ldr	r3, [pc, #32]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011b9c:	4b06      	ldr	r3, [pc, #24]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011ba2:	4805      	ldr	r0, [pc, #20]	; (8011bb8 <MX_USART1_UART_Init+0x4c>)
 8011ba4:	f001 fe28 	bl	80137f8 <HAL_UART_Init>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d001      	beq.n	8011bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8011bae:	f000 f8c9 	bl	8011d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8011bb2:	bf00      	nop
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	20000088 	.word	0x20000088
 8011bbc:	40013800 	.word	0x40013800

08011bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011bc6:	4b0c      	ldr	r3, [pc, #48]	; (8011bf8 <MX_DMA_Init+0x38>)
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	4a0b      	ldr	r2, [pc, #44]	; (8011bf8 <MX_DMA_Init+0x38>)
 8011bcc:	f043 0301 	orr.w	r3, r3, #1
 8011bd0:	6153      	str	r3, [r2, #20]
 8011bd2:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <MX_DMA_Init+0x38>)
 8011bd4:	695b      	ldr	r3, [r3, #20]
 8011bd6:	f003 0301 	and.w	r3, r3, #1
 8011bda:	607b      	str	r3, [r7, #4]
 8011bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8011bde:	2200      	movs	r2, #0
 8011be0:	2100      	movs	r1, #0
 8011be2:	200f      	movs	r0, #15
 8011be4:	f000 fb39 	bl	801225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8011be8:	200f      	movs	r0, #15
 8011bea:	f000 fb52 	bl	8012292 <HAL_NVIC_EnableIRQ>

}
 8011bee:	bf00      	nop
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	40021000 	.word	0x40021000

08011bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011c02:	4b0e      	ldr	r3, [pc, #56]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	4a0d      	ldr	r2, [pc, #52]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c08:	f043 0320 	orr.w	r3, r3, #32
 8011c0c:	6193      	str	r3, [r2, #24]
 8011c0e:	4b0b      	ldr	r3, [pc, #44]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c10:	699b      	ldr	r3, [r3, #24]
 8011c12:	f003 0320 	and.w	r3, r3, #32
 8011c16:	607b      	str	r3, [r7, #4]
 8011c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c1a:	4b08      	ldr	r3, [pc, #32]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c1c:	699b      	ldr	r3, [r3, #24]
 8011c1e:	4a07      	ldr	r2, [pc, #28]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c20:	f043 0304 	orr.w	r3, r3, #4
 8011c24:	6193      	str	r3, [r2, #24]
 8011c26:	4b05      	ldr	r3, [pc, #20]	; (8011c3c <MX_GPIO_Init+0x40>)
 8011c28:	699b      	ldr	r3, [r3, #24]
 8011c2a:	f003 0304 	and.w	r3, r3, #4
 8011c2e:	603b      	str	r3, [r7, #0]
 8011c30:	683b      	ldr	r3, [r7, #0]

}
 8011c32:	bf00      	nop
 8011c34:	370c      	adds	r7, #12
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bc80      	pop	{r7}
 8011c3a:	4770      	bx	lr
 8011c3c:	40021000 	.word	0x40021000

08011c40 <GetPage>:

/* USER CODE BEGIN 4 */

// Get the page that contain the specific address
static uint32_t GetPage(uint32_t Address)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8011c48:	2300      	movs	r3, #0
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	e016      	b.n	8011c7c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011c54:	3301      	adds	r3, #1
 8011c56:	029b      	lsls	r3, r3, #10
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d20b      	bcs.n	8011c76 <GetPage+0x36>
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011c64:	029b      	lsls	r3, r3, #10
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d304      	bcc.n	8011c76 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011c72:	029b      	lsls	r3, r3, #10
 8011c74:	e006      	b.n	8011c84 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8011c80:	dde5      	ble.n	8011c4e <GetPage+0xe>
	  }
  }

  return 0;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bc80      	pop	{r7}
 8011c8c:	4770      	bx	lr
	...

08011c90 <Flash_Write_Data>:

// Program Flash memory with start page address
uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08a      	sub	sp, #40	; 0x28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8011ca2:	f000 fe71 	bl	8012988 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7ff ffca 	bl	8011c40 <GetPage>
 8011cac:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8011cae:	88fb      	ldrh	r3, [r7, #6]
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8011cba:	69f8      	ldr	r0, [r7, #28]
 8011cbc:	f7ff ffc0 	bl	8011c40 <GetPage>
 8011cc0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8011cc2:	4b1f      	ldr	r3, [pc, #124]	; (8011d40 <Flash_Write_Data+0xb0>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8011cc8:	4a1d      	ldr	r2, [pc, #116]	; (8011d40 <Flash_Write_Data+0xb0>)
 8011cca:	6a3b      	ldr	r3, [r7, #32]
 8011ccc:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8011cce:	69ba      	ldr	r2, [r7, #24]
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	0a9b      	lsrs	r3, r3, #10
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	4a19      	ldr	r2, [pc, #100]	; (8011d40 <Flash_Write_Data+0xb0>)
 8011cda:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8011cdc:	f107 0314 	add.w	r3, r7, #20
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	4817      	ldr	r0, [pc, #92]	; (8011d40 <Flash_Write_Data+0xb0>)
 8011ce4:	f000 ff42 	bl	8012b6c <HAL_FLASHEx_Erase>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d01d      	beq.n	8011d2a <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8011cee:	f000 fe81 	bl	80129f4 <HAL_FLASH_GetError>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	e020      	b.n	8011d38 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	461a      	mov	r2, r3
 8011d02:	f04f 0300 	mov.w	r3, #0
 8011d06:	68f9      	ldr	r1, [r7, #12]
 8011d08:	2002      	movs	r0, #2
 8011d0a:	f000 fdcd 	bl	80128a8 <HAL_FLASH_Program>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d106      	bne.n	8011d22 <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	3304      	adds	r3, #4
 8011d18:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d20:	e003      	b.n	8011d2a <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8011d22:	f000 fe67 	bl	80129f4 <HAL_FLASH_GetError>
 8011d26:	4603      	mov	r3, r0
 8011d28:	e006      	b.n	8011d38 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 8011d2a:	88fb      	ldrh	r3, [r7, #6]
 8011d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	dbe1      	blt.n	8011cf6 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8011d32:	f000 fe4f 	bl	80129d4 <HAL_FLASH_Lock>

	   return 0;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3728      	adds	r7, #40	; 0x28
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	2000002c 	.word	0x2000002c

08011d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011d44:	b480      	push	{r7}
 8011d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011d48:	b672      	cpsid	i
}
 8011d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011d4c:	e7fe      	b.n	8011d4c <Error_Handler+0x8>
	...

08011d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b085      	sub	sp, #20
 8011d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8011d56:	4b15      	ldr	r3, [pc, #84]	; (8011dac <HAL_MspInit+0x5c>)
 8011d58:	699b      	ldr	r3, [r3, #24]
 8011d5a:	4a14      	ldr	r2, [pc, #80]	; (8011dac <HAL_MspInit+0x5c>)
 8011d5c:	f043 0301 	orr.w	r3, r3, #1
 8011d60:	6193      	str	r3, [r2, #24]
 8011d62:	4b12      	ldr	r3, [pc, #72]	; (8011dac <HAL_MspInit+0x5c>)
 8011d64:	699b      	ldr	r3, [r3, #24]
 8011d66:	f003 0301 	and.w	r3, r3, #1
 8011d6a:	60bb      	str	r3, [r7, #8]
 8011d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011d6e:	4b0f      	ldr	r3, [pc, #60]	; (8011dac <HAL_MspInit+0x5c>)
 8011d70:	69db      	ldr	r3, [r3, #28]
 8011d72:	4a0e      	ldr	r2, [pc, #56]	; (8011dac <HAL_MspInit+0x5c>)
 8011d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d78:	61d3      	str	r3, [r2, #28]
 8011d7a:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <HAL_MspInit+0x5c>)
 8011d7c:	69db      	ldr	r3, [r3, #28]
 8011d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d82:	607b      	str	r3, [r7, #4]
 8011d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8011d86:	4b0a      	ldr	r3, [pc, #40]	; (8011db0 <HAL_MspInit+0x60>)
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8011d92:	60fb      	str	r3, [r7, #12]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	4a04      	ldr	r2, [pc, #16]	; (8011db0 <HAL_MspInit+0x60>)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011da2:	bf00      	nop
 8011da4:	3714      	adds	r7, #20
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bc80      	pop	{r7}
 8011daa:	4770      	bx	lr
 8011dac:	40021000 	.word	0x40021000
 8011db0:	40010000 	.word	0x40010000

08011db4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4a09      	ldr	r2, [pc, #36]	; (8011de8 <HAL_CRC_MspInit+0x34>)
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	d10b      	bne.n	8011dde <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8011dc6:	4b09      	ldr	r3, [pc, #36]	; (8011dec <HAL_CRC_MspInit+0x38>)
 8011dc8:	695b      	ldr	r3, [r3, #20]
 8011dca:	4a08      	ldr	r2, [pc, #32]	; (8011dec <HAL_CRC_MspInit+0x38>)
 8011dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dd0:	6153      	str	r3, [r2, #20]
 8011dd2:	4b06      	ldr	r3, [pc, #24]	; (8011dec <HAL_CRC_MspInit+0x38>)
 8011dd4:	695b      	ldr	r3, [r3, #20]
 8011dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8011dde:	bf00      	nop
 8011de0:	3714      	adds	r7, #20
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bc80      	pop	{r7}
 8011de6:	4770      	bx	lr
 8011de8:	40023000 	.word	0x40023000
 8011dec:	40021000 	.word	0x40021000

08011df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011df8:	f107 0310 	add.w	r3, r7, #16
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	601a      	str	r2, [r3, #0]
 8011e00:	605a      	str	r2, [r3, #4]
 8011e02:	609a      	str	r2, [r3, #8]
 8011e04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	4a33      	ldr	r2, [pc, #204]	; (8011ed8 <HAL_UART_MspInit+0xe8>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d15f      	bne.n	8011ed0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011e10:	4b32      	ldr	r3, [pc, #200]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e12:	699b      	ldr	r3, [r3, #24]
 8011e14:	4a31      	ldr	r2, [pc, #196]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011e1a:	6193      	str	r3, [r2, #24]
 8011e1c:	4b2f      	ldr	r3, [pc, #188]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e1e:	699b      	ldr	r3, [r3, #24]
 8011e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e24:	60fb      	str	r3, [r7, #12]
 8011e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e28:	4b2c      	ldr	r3, [pc, #176]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e2a:	699b      	ldr	r3, [r3, #24]
 8011e2c:	4a2b      	ldr	r2, [pc, #172]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e2e:	f043 0304 	orr.w	r3, r3, #4
 8011e32:	6193      	str	r3, [r2, #24]
 8011e34:	4b29      	ldr	r3, [pc, #164]	; (8011edc <HAL_UART_MspInit+0xec>)
 8011e36:	699b      	ldr	r3, [r3, #24]
 8011e38:	f003 0304 	and.w	r3, r3, #4
 8011e3c:	60bb      	str	r3, [r7, #8]
 8011e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e46:	2302      	movs	r3, #2
 8011e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e4e:	f107 0310 	add.w	r3, r7, #16
 8011e52:	4619      	mov	r1, r3
 8011e54:	4822      	ldr	r0, [pc, #136]	; (8011ee0 <HAL_UART_MspInit+0xf0>)
 8011e56:	f000 ff31 	bl	8012cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011e60:	2300      	movs	r3, #0
 8011e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e64:	2300      	movs	r3, #0
 8011e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e68:	f107 0310 	add.w	r3, r7, #16
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	481c      	ldr	r0, [pc, #112]	; (8011ee0 <HAL_UART_MspInit+0xf0>)
 8011e70:	f000 ff24 	bl	8012cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8011e74:	4b1b      	ldr	r3, [pc, #108]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e76:	4a1c      	ldr	r2, [pc, #112]	; (8011ee8 <HAL_UART_MspInit+0xf8>)
 8011e78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011e7a:	4b1a      	ldr	r3, [pc, #104]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011e80:	4b18      	ldr	r3, [pc, #96]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e82:	2200      	movs	r2, #0
 8011e84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011e86:	4b17      	ldr	r3, [pc, #92]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e88:	2280      	movs	r2, #128	; 0x80
 8011e8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011e8c:	4b15      	ldr	r3, [pc, #84]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e8e:	2200      	movs	r2, #0
 8011e90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011e92:	4b14      	ldr	r3, [pc, #80]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8011e98:	4b12      	ldr	r3, [pc, #72]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011e9e:	4b11      	ldr	r3, [pc, #68]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8011ea4:	480f      	ldr	r0, [pc, #60]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011ea6:	f000 fa61 	bl	801236c <HAL_DMA_Init>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8011eb0:	f7ff ff48 	bl	8011d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4a0b      	ldr	r2, [pc, #44]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8011eba:	4a0a      	ldr	r2, [pc, #40]	; (8011ee4 <HAL_UART_MspInit+0xf4>)
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	2025      	movs	r0, #37	; 0x25
 8011ec6:	f000 f9c8 	bl	801225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011eca:	2025      	movs	r0, #37	; 0x25
 8011ecc:	f000 f9e1 	bl	8012292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8011ed0:	bf00      	nop
 8011ed2:	3720      	adds	r7, #32
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	40013800 	.word	0x40013800
 8011edc:	40021000 	.word	0x40021000
 8011ee0:	40010800 	.word	0x40010800
 8011ee4:	20000044 	.word	0x20000044
 8011ee8:	40020058 	.word	0x40020058

08011eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011eec:	b480      	push	{r7}
 8011eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011ef0:	e7fe      	b.n	8011ef0 <NMI_Handler+0x4>

08011ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011ef2:	b480      	push	{r7}
 8011ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011ef6:	e7fe      	b.n	8011ef6 <HardFault_Handler+0x4>

08011ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011efc:	e7fe      	b.n	8011efc <MemManage_Handler+0x4>

08011efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011efe:	b480      	push	{r7}
 8011f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011f02:	e7fe      	b.n	8011f02 <BusFault_Handler+0x4>

08011f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011f04:	b480      	push	{r7}
 8011f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011f08:	e7fe      	b.n	8011f08 <UsageFault_Handler+0x4>

08011f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011f0e:	bf00      	nop
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bc80      	pop	{r7}
 8011f14:	4770      	bx	lr

08011f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011f16:	b480      	push	{r7}
 8011f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011f1a:	bf00      	nop
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bc80      	pop	{r7}
 8011f20:	4770      	bx	lr

08011f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011f22:	b480      	push	{r7}
 8011f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011f26:	bf00      	nop
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bc80      	pop	{r7}
 8011f2c:	4770      	bx	lr

08011f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011f32:	f000 f889 	bl	8012048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011f36:	bf00      	nop
 8011f38:	bd80      	pop	{r7, pc}
	...

08011f3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8011f40:	4802      	ldr	r0, [pc, #8]	; (8011f4c <DMA1_Channel5_IRQHandler+0x10>)
 8011f42:	f000 fb7d 	bl	8012640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8011f46:	bf00      	nop
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20000044 	.word	0x20000044

08011f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8011f54:	4802      	ldr	r0, [pc, #8]	; (8011f60 <USART1_IRQHandler+0x10>)
 8011f56:	f001 fd7d 	bl	8013a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8011f5a:	bf00      	nop
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	20000088 	.word	0x20000088

08011f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011f64:	b480      	push	{r7}
 8011f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011f68:	bf00      	nop
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bc80      	pop	{r7}
 8011f6e:	4770      	bx	lr

08011f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011f70:	480c      	ldr	r0, [pc, #48]	; (8011fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8011f72:	490d      	ldr	r1, [pc, #52]	; (8011fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8011f74:	4a0d      	ldr	r2, [pc, #52]	; (8011fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8011f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011f78:	e002      	b.n	8011f80 <LoopCopyDataInit>

08011f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011f7e:	3304      	adds	r3, #4

08011f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011f84:	d3f9      	bcc.n	8011f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011f86:	4a0a      	ldr	r2, [pc, #40]	; (8011fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011f88:	4c0a      	ldr	r4, [pc, #40]	; (8011fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8011f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011f8c:	e001      	b.n	8011f92 <LoopFillZerobss>

08011f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011f90:	3204      	adds	r2, #4

08011f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011f94:	d3fb      	bcc.n	8011f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011f96:	f7ff ffe5 	bl	8011f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011f9a:	f002 fa7b 	bl	8014494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011f9e:	f7ff fd4f 	bl	8011a40 <main>
  bx lr
 8011fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8011fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8011fac:	0801462c 	.word	0x0801462c
  ldr r2, =_sbss
 8011fb0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8011fb4:	200030f0 	.word	0x200030f0

08011fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011fb8:	e7fe      	b.n	8011fb8 <ADC1_2_IRQHandler>
	...

08011fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011fc0:	4b08      	ldr	r3, [pc, #32]	; (8011fe4 <HAL_Init+0x28>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4a07      	ldr	r2, [pc, #28]	; (8011fe4 <HAL_Init+0x28>)
 8011fc6:	f043 0310 	orr.w	r3, r3, #16
 8011fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011fcc:	2003      	movs	r0, #3
 8011fce:	f000 f939 	bl	8012244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	f000 f808 	bl	8011fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011fd8:	f7ff feba 	bl	8011d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	40022000 	.word	0x40022000

08011fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011ff0:	4b12      	ldr	r3, [pc, #72]	; (801203c <HAL_InitTick+0x54>)
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	4b12      	ldr	r3, [pc, #72]	; (8012040 <HAL_InitTick+0x58>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8012002:	fbb2 f3f3 	udiv	r3, r2, r3
 8012006:	4618      	mov	r0, r3
 8012008:	f000 f955 	bl	80122b6 <HAL_SYSTICK_Config>
 801200c:	4603      	mov	r3, r0
 801200e:	2b00      	cmp	r3, #0
 8012010:	d001      	beq.n	8012016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8012012:	2301      	movs	r3, #1
 8012014:	e00e      	b.n	8012034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b0f      	cmp	r3, #15
 801201a:	d80a      	bhi.n	8012032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801201c:	2200      	movs	r2, #0
 801201e:	6879      	ldr	r1, [r7, #4]
 8012020:	f04f 30ff 	mov.w	r0, #4294967295
 8012024:	f000 f919 	bl	801225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012028:	4a06      	ldr	r2, [pc, #24]	; (8012044 <HAL_InitTick+0x5c>)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801202e:	2300      	movs	r3, #0
 8012030:	e000      	b.n	8012034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8012032:	2301      	movs	r3, #1
}
 8012034:	4618      	mov	r0, r3
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	20000000 	.word	0x20000000
 8012040:	20000008 	.word	0x20000008
 8012044:	20000004 	.word	0x20000004

08012048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012048:	b480      	push	{r7}
 801204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801204c:	4b05      	ldr	r3, [pc, #20]	; (8012064 <HAL_IncTick+0x1c>)
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	461a      	mov	r2, r3
 8012052:	4b05      	ldr	r3, [pc, #20]	; (8012068 <HAL_IncTick+0x20>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4413      	add	r3, r2
 8012058:	4a03      	ldr	r2, [pc, #12]	; (8012068 <HAL_IncTick+0x20>)
 801205a:	6013      	str	r3, [r2, #0]
}
 801205c:	bf00      	nop
 801205e:	46bd      	mov	sp, r7
 8012060:	bc80      	pop	{r7}
 8012062:	4770      	bx	lr
 8012064:	20000008 	.word	0x20000008
 8012068:	200030cc 	.word	0x200030cc

0801206c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801206c:	b480      	push	{r7}
 801206e:	af00      	add	r7, sp, #0
  return uwTick;
 8012070:	4b02      	ldr	r3, [pc, #8]	; (801207c <HAL_GetTick+0x10>)
 8012072:	681b      	ldr	r3, [r3, #0]
}
 8012074:	4618      	mov	r0, r3
 8012076:	46bd      	mov	sp, r7
 8012078:	bc80      	pop	{r7}
 801207a:	4770      	bx	lr
 801207c:	200030cc 	.word	0x200030cc

08012080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012080:	b480      	push	{r7}
 8012082:	b085      	sub	sp, #20
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f003 0307 	and.w	r3, r3, #7
 801208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012090:	4b0c      	ldr	r3, [pc, #48]	; (80120c4 <__NVIC_SetPriorityGrouping+0x44>)
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801209c:	4013      	ands	r3, r2
 801209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80120a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80120ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80120b2:	4a04      	ldr	r2, [pc, #16]	; (80120c4 <__NVIC_SetPriorityGrouping+0x44>)
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	60d3      	str	r3, [r2, #12]
}
 80120b8:	bf00      	nop
 80120ba:	3714      	adds	r7, #20
 80120bc:	46bd      	mov	sp, r7
 80120be:	bc80      	pop	{r7}
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	e000ed00 	.word	0xe000ed00

080120c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80120c8:	b480      	push	{r7}
 80120ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80120cc:	4b04      	ldr	r3, [pc, #16]	; (80120e0 <__NVIC_GetPriorityGrouping+0x18>)
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	0a1b      	lsrs	r3, r3, #8
 80120d2:	f003 0307 	and.w	r3, r3, #7
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	46bd      	mov	sp, r7
 80120da:	bc80      	pop	{r7}
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop
 80120e0:	e000ed00 	.word	0xe000ed00

080120e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	4603      	mov	r3, r0
 80120ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80120ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	db0b      	blt.n	801210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80120f6:	79fb      	ldrb	r3, [r7, #7]
 80120f8:	f003 021f 	and.w	r2, r3, #31
 80120fc:	4906      	ldr	r1, [pc, #24]	; (8012118 <__NVIC_EnableIRQ+0x34>)
 80120fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012102:	095b      	lsrs	r3, r3, #5
 8012104:	2001      	movs	r0, #1
 8012106:	fa00 f202 	lsl.w	r2, r0, r2
 801210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801210e:	bf00      	nop
 8012110:	370c      	adds	r7, #12
 8012112:	46bd      	mov	sp, r7
 8012114:	bc80      	pop	{r7}
 8012116:	4770      	bx	lr
 8012118:	e000e100 	.word	0xe000e100

0801211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	4603      	mov	r3, r0
 8012124:	6039      	str	r1, [r7, #0]
 8012126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801212c:	2b00      	cmp	r3, #0
 801212e:	db0a      	blt.n	8012146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	b2da      	uxtb	r2, r3
 8012134:	490c      	ldr	r1, [pc, #48]	; (8012168 <__NVIC_SetPriority+0x4c>)
 8012136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801213a:	0112      	lsls	r2, r2, #4
 801213c:	b2d2      	uxtb	r2, r2
 801213e:	440b      	add	r3, r1
 8012140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012144:	e00a      	b.n	801215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	b2da      	uxtb	r2, r3
 801214a:	4908      	ldr	r1, [pc, #32]	; (801216c <__NVIC_SetPriority+0x50>)
 801214c:	79fb      	ldrb	r3, [r7, #7]
 801214e:	f003 030f 	and.w	r3, r3, #15
 8012152:	3b04      	subs	r3, #4
 8012154:	0112      	lsls	r2, r2, #4
 8012156:	b2d2      	uxtb	r2, r2
 8012158:	440b      	add	r3, r1
 801215a:	761a      	strb	r2, [r3, #24]
}
 801215c:	bf00      	nop
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	bc80      	pop	{r7}
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	e000e100 	.word	0xe000e100
 801216c:	e000ed00 	.word	0xe000ed00

08012170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012170:	b480      	push	{r7}
 8012172:	b089      	sub	sp, #36	; 0x24
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f003 0307 	and.w	r3, r3, #7
 8012182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	f1c3 0307 	rsb	r3, r3, #7
 801218a:	2b04      	cmp	r3, #4
 801218c:	bf28      	it	cs
 801218e:	2304      	movcs	r3, #4
 8012190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	3304      	adds	r3, #4
 8012196:	2b06      	cmp	r3, #6
 8012198:	d902      	bls.n	80121a0 <NVIC_EncodePriority+0x30>
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	3b03      	subs	r3, #3
 801219e:	e000      	b.n	80121a2 <NVIC_EncodePriority+0x32>
 80121a0:	2300      	movs	r3, #0
 80121a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80121a4:	f04f 32ff 	mov.w	r2, #4294967295
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	fa02 f303 	lsl.w	r3, r2, r3
 80121ae:	43da      	mvns	r2, r3
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	401a      	ands	r2, r3
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80121b8:	f04f 31ff 	mov.w	r1, #4294967295
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	fa01 f303 	lsl.w	r3, r1, r3
 80121c2:	43d9      	mvns	r1, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80121c8:	4313      	orrs	r3, r2
         );
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3724      	adds	r7, #36	; 0x24
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bc80      	pop	{r7}
 80121d2:	4770      	bx	lr

080121d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80121d4:	b480      	push	{r7}
 80121d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80121d8:	f3bf 8f4f 	dsb	sy
}
 80121dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80121de:	4b06      	ldr	r3, [pc, #24]	; (80121f8 <__NVIC_SystemReset+0x24>)
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80121e6:	4904      	ldr	r1, [pc, #16]	; (80121f8 <__NVIC_SystemReset+0x24>)
 80121e8:	4b04      	ldr	r3, [pc, #16]	; (80121fc <__NVIC_SystemReset+0x28>)
 80121ea:	4313      	orrs	r3, r2
 80121ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80121ee:	f3bf 8f4f 	dsb	sy
}
 80121f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80121f4:	bf00      	nop
 80121f6:	e7fd      	b.n	80121f4 <__NVIC_SystemReset+0x20>
 80121f8:	e000ed00 	.word	0xe000ed00
 80121fc:	05fa0004 	.word	0x05fa0004

08012200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	3b01      	subs	r3, #1
 801220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012210:	d301      	bcc.n	8012216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012212:	2301      	movs	r3, #1
 8012214:	e00f      	b.n	8012236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012216:	4a0a      	ldr	r2, [pc, #40]	; (8012240 <SysTick_Config+0x40>)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	3b01      	subs	r3, #1
 801221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801221e:	210f      	movs	r1, #15
 8012220:	f04f 30ff 	mov.w	r0, #4294967295
 8012224:	f7ff ff7a 	bl	801211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012228:	4b05      	ldr	r3, [pc, #20]	; (8012240 <SysTick_Config+0x40>)
 801222a:	2200      	movs	r2, #0
 801222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801222e:	4b04      	ldr	r3, [pc, #16]	; (8012240 <SysTick_Config+0x40>)
 8012230:	2207      	movs	r2, #7
 8012232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	e000e010 	.word	0xe000e010

08012244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff ff17 	bl	8012080 <__NVIC_SetPriorityGrouping>
}
 8012252:	bf00      	nop
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801225a:	b580      	push	{r7, lr}
 801225c:	b086      	sub	sp, #24
 801225e:	af00      	add	r7, sp, #0
 8012260:	4603      	mov	r3, r0
 8012262:	60b9      	str	r1, [r7, #8]
 8012264:	607a      	str	r2, [r7, #4]
 8012266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012268:	2300      	movs	r3, #0
 801226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801226c:	f7ff ff2c 	bl	80120c8 <__NVIC_GetPriorityGrouping>
 8012270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	68b9      	ldr	r1, [r7, #8]
 8012276:	6978      	ldr	r0, [r7, #20]
 8012278:	f7ff ff7a 	bl	8012170 <NVIC_EncodePriority>
 801227c:	4602      	mov	r2, r0
 801227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff ff49 	bl	801211c <__NVIC_SetPriority>
}
 801228a:	bf00      	nop
 801228c:	3718      	adds	r7, #24
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	4603      	mov	r3, r0
 801229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7ff ff1f 	bl	80120e4 <__NVIC_EnableIRQ>
}
 80122a6:	bf00      	nop
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80122b2:	f7ff ff8f 	bl	80121d4 <__NVIC_SystemReset>

080122b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80122b6:	b580      	push	{r7, lr}
 80122b8:	b082      	sub	sp, #8
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff ff9e 	bl	8012200 <SysTick_Config>
 80122c4:	4603      	mov	r3, r0
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3708      	adds	r7, #8
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}

080122ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80122ce:	b580      	push	{r7, lr}
 80122d0:	b082      	sub	sp, #8
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d101      	bne.n	80122e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80122dc:	2301      	movs	r3, #1
 80122de:	e00e      	b.n	80122fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	795b      	ldrb	r3, [r3, #5]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d105      	bne.n	80122f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2200      	movs	r2, #0
 80122ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ff fd5f 	bl	8011db4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8012306:	b480      	push	{r7}
 8012308:	b087      	sub	sp, #28
 801230a:	af00      	add	r7, sp, #0
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8012312:	2300      	movs	r3, #0
 8012314:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2202      	movs	r2, #2
 801231a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	689a      	ldr	r2, [r3, #8]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f042 0201 	orr.w	r2, r2, #1
 801232a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 801232c:	2300      	movs	r3, #0
 801232e:	617b      	str	r3, [r7, #20]
 8012330:	e00a      	b.n	8012348 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	68ba      	ldr	r2, [r7, #8]
 8012338:	441a      	add	r2, r3
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	6812      	ldr	r2, [r2, #0]
 8012340:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	3301      	adds	r3, #1
 8012346:	617b      	str	r3, [r7, #20]
 8012348:	697a      	ldr	r2, [r7, #20]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	429a      	cmp	r2, r3
 801234e:	d3f0      	bcc.n	8012332 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2201      	movs	r2, #1
 801235c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 801235e:	693b      	ldr	r3, [r7, #16]
}
 8012360:	4618      	mov	r0, r3
 8012362:	371c      	adds	r7, #28
 8012364:	46bd      	mov	sp, r7
 8012366:	bc80      	pop	{r7}
 8012368:	4770      	bx	lr
	...

0801236c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801236c:	b480      	push	{r7}
 801236e:	b085      	sub	sp, #20
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012374:	2300      	movs	r3, #0
 8012376:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d101      	bne.n	8012382 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 801237e:	2301      	movs	r3, #1
 8012380:	e043      	b.n	801240a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	461a      	mov	r2, r3
 8012388:	4b22      	ldr	r3, [pc, #136]	; (8012414 <HAL_DMA_Init+0xa8>)
 801238a:	4413      	add	r3, r2
 801238c:	4a22      	ldr	r2, [pc, #136]	; (8012418 <HAL_DMA_Init+0xac>)
 801238e:	fba2 2303 	umull	r2, r3, r2, r3
 8012392:	091b      	lsrs	r3, r3, #4
 8012394:	009a      	lsls	r2, r3, #2
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4a1f      	ldr	r2, [pc, #124]	; (801241c <HAL_DMA_Init+0xb0>)
 801239e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2202      	movs	r2, #2
 80123a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80123b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80123ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80123c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80123d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	695b      	ldr	r3, [r3, #20]
 80123d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80123dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	69db      	ldr	r3, [r3, #28]
 80123e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80123e4:	68fa      	ldr	r2, [r7, #12]
 80123e6:	4313      	orrs	r3, r2
 80123e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	68fa      	ldr	r2, [r7, #12]
 80123f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2201      	movs	r2, #1
 80123fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8012408:	2300      	movs	r3, #0
}
 801240a:	4618      	mov	r0, r3
 801240c:	3714      	adds	r7, #20
 801240e:	46bd      	mov	sp, r7
 8012410:	bc80      	pop	{r7}
 8012412:	4770      	bx	lr
 8012414:	bffdfff8 	.word	0xbffdfff8
 8012418:	cccccccd 	.word	0xcccccccd
 801241c:	40020000 	.word	0x40020000

08012420 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801242e:	2300      	movs	r3, #0
 8012430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012438:	2b01      	cmp	r3, #1
 801243a:	d101      	bne.n	8012440 <HAL_DMA_Start_IT+0x20>
 801243c:	2302      	movs	r3, #2
 801243e:	e04a      	b.n	80124d6 <HAL_DMA_Start_IT+0xb6>
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2201      	movs	r2, #1
 8012444:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801244e:	2b01      	cmp	r3, #1
 8012450:	d13a      	bne.n	80124c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2202      	movs	r2, #2
 8012456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2200      	movs	r2, #0
 801245e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f022 0201 	bic.w	r2, r2, #1
 801246e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	68b9      	ldr	r1, [r7, #8]
 8012476:	68f8      	ldr	r0, [r7, #12]
 8012478:	f000 f9e8 	bl	801284c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012480:	2b00      	cmp	r3, #0
 8012482:	d008      	beq.n	8012496 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f042 020e 	orr.w	r2, r2, #14
 8012492:	601a      	str	r2, [r3, #0]
 8012494:	e00f      	b.n	80124b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f022 0204 	bic.w	r2, r2, #4
 80124a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f042 020a 	orr.w	r2, r2, #10
 80124b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f042 0201 	orr.w	r2, r2, #1
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	e005      	b.n	80124d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80124d0:	2302      	movs	r3, #2
 80124d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3718      	adds	r7, #24
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80124de:	b480      	push	{r7}
 80124e0:	b085      	sub	sp, #20
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d008      	beq.n	8012506 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2204      	movs	r2, #4
 80124f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8012502:	2301      	movs	r3, #1
 8012504:	e020      	b.n	8012548 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f022 020e 	bic.w	r2, r2, #14
 8012514:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f022 0201 	bic.w	r2, r2, #1
 8012524:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801252e:	2101      	movs	r1, #1
 8012530:	fa01 f202 	lsl.w	r2, r1, r2
 8012534:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2201      	movs	r2, #1
 801253a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2200      	movs	r2, #0
 8012542:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8012546:	7bfb      	ldrb	r3, [r7, #15]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3714      	adds	r7, #20
 801254c:	46bd      	mov	sp, r7
 801254e:	bc80      	pop	{r7}
 8012550:	4770      	bx	lr
	...

08012554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801255c:	2300      	movs	r3, #0
 801255e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012566:	2b02      	cmp	r3, #2
 8012568:	d005      	beq.n	8012576 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2204      	movs	r2, #4
 801256e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8012570:	2301      	movs	r3, #1
 8012572:	73fb      	strb	r3, [r7, #15]
 8012574:	e051      	b.n	801261a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f022 020e 	bic.w	r2, r2, #14
 8012584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f022 0201 	bic.w	r2, r2, #1
 8012594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a22      	ldr	r2, [pc, #136]	; (8012624 <HAL_DMA_Abort_IT+0xd0>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d029      	beq.n	80125f4 <HAL_DMA_Abort_IT+0xa0>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a20      	ldr	r2, [pc, #128]	; (8012628 <HAL_DMA_Abort_IT+0xd4>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d022      	beq.n	80125f0 <HAL_DMA_Abort_IT+0x9c>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	4a1f      	ldr	r2, [pc, #124]	; (801262c <HAL_DMA_Abort_IT+0xd8>)
 80125b0:	4293      	cmp	r3, r2
 80125b2:	d01a      	beq.n	80125ea <HAL_DMA_Abort_IT+0x96>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a1d      	ldr	r2, [pc, #116]	; (8012630 <HAL_DMA_Abort_IT+0xdc>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d012      	beq.n	80125e4 <HAL_DMA_Abort_IT+0x90>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a1c      	ldr	r2, [pc, #112]	; (8012634 <HAL_DMA_Abort_IT+0xe0>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d00a      	beq.n	80125de <HAL_DMA_Abort_IT+0x8a>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4a1a      	ldr	r2, [pc, #104]	; (8012638 <HAL_DMA_Abort_IT+0xe4>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d102      	bne.n	80125d8 <HAL_DMA_Abort_IT+0x84>
 80125d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80125d6:	e00e      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80125dc:	e00b      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80125e2:	e008      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125e8:	e005      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ee:	e002      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125f0:	2310      	movs	r3, #16
 80125f2:	e000      	b.n	80125f6 <HAL_DMA_Abort_IT+0xa2>
 80125f4:	2301      	movs	r3, #1
 80125f6:	4a11      	ldr	r2, [pc, #68]	; (801263c <HAL_DMA_Abort_IT+0xe8>)
 80125f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2201      	movs	r2, #1
 80125fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	4798      	blx	r3
    } 
  }
  return status;
 801261a:	7bfb      	ldrb	r3, [r7, #15]
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	40020008 	.word	0x40020008
 8012628:	4002001c 	.word	0x4002001c
 801262c:	40020030 	.word	0x40020030
 8012630:	40020044 	.word	0x40020044
 8012634:	40020058 	.word	0x40020058
 8012638:	4002006c 	.word	0x4002006c
 801263c:	40020000 	.word	0x40020000

08012640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801265c:	2204      	movs	r2, #4
 801265e:	409a      	lsls	r2, r3
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	4013      	ands	r3, r2
 8012664:	2b00      	cmp	r3, #0
 8012666:	d04f      	beq.n	8012708 <HAL_DMA_IRQHandler+0xc8>
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	f003 0304 	and.w	r3, r3, #4
 801266e:	2b00      	cmp	r3, #0
 8012670:	d04a      	beq.n	8012708 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	f003 0320 	and.w	r3, r3, #32
 801267c:	2b00      	cmp	r3, #0
 801267e:	d107      	bne.n	8012690 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f022 0204 	bic.w	r2, r2, #4
 801268e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4a66      	ldr	r2, [pc, #408]	; (8012830 <HAL_DMA_IRQHandler+0x1f0>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d029      	beq.n	80126ee <HAL_DMA_IRQHandler+0xae>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4a65      	ldr	r2, [pc, #404]	; (8012834 <HAL_DMA_IRQHandler+0x1f4>)
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d022      	beq.n	80126ea <HAL_DMA_IRQHandler+0xaa>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	4a63      	ldr	r2, [pc, #396]	; (8012838 <HAL_DMA_IRQHandler+0x1f8>)
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d01a      	beq.n	80126e4 <HAL_DMA_IRQHandler+0xa4>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4a62      	ldr	r2, [pc, #392]	; (801283c <HAL_DMA_IRQHandler+0x1fc>)
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d012      	beq.n	80126de <HAL_DMA_IRQHandler+0x9e>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a60      	ldr	r2, [pc, #384]	; (8012840 <HAL_DMA_IRQHandler+0x200>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d00a      	beq.n	80126d8 <HAL_DMA_IRQHandler+0x98>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	4a5f      	ldr	r2, [pc, #380]	; (8012844 <HAL_DMA_IRQHandler+0x204>)
 80126c8:	4293      	cmp	r3, r2
 80126ca:	d102      	bne.n	80126d2 <HAL_DMA_IRQHandler+0x92>
 80126cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126d0:	e00e      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80126d6:	e00b      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126dc:	e008      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126e2:	e005      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126e8:	e002      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126ea:	2340      	movs	r3, #64	; 0x40
 80126ec:	e000      	b.n	80126f0 <HAL_DMA_IRQHandler+0xb0>
 80126ee:	2304      	movs	r3, #4
 80126f0:	4a55      	ldr	r2, [pc, #340]	; (8012848 <HAL_DMA_IRQHandler+0x208>)
 80126f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 8094 	beq.w	8012826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8012706:	e08e      	b.n	8012826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270c:	2202      	movs	r2, #2
 801270e:	409a      	lsls	r2, r3
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	4013      	ands	r3, r2
 8012714:	2b00      	cmp	r3, #0
 8012716:	d056      	beq.n	80127c6 <HAL_DMA_IRQHandler+0x186>
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	f003 0302 	and.w	r3, r3, #2
 801271e:	2b00      	cmp	r3, #0
 8012720:	d051      	beq.n	80127c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f003 0320 	and.w	r3, r3, #32
 801272c:	2b00      	cmp	r3, #0
 801272e:	d10b      	bne.n	8012748 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	681a      	ldr	r2, [r3, #0]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f022 020a 	bic.w	r2, r2, #10
 801273e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2201      	movs	r2, #1
 8012744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4a38      	ldr	r2, [pc, #224]	; (8012830 <HAL_DMA_IRQHandler+0x1f0>)
 801274e:	4293      	cmp	r3, r2
 8012750:	d029      	beq.n	80127a6 <HAL_DMA_IRQHandler+0x166>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4a37      	ldr	r2, [pc, #220]	; (8012834 <HAL_DMA_IRQHandler+0x1f4>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d022      	beq.n	80127a2 <HAL_DMA_IRQHandler+0x162>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a35      	ldr	r2, [pc, #212]	; (8012838 <HAL_DMA_IRQHandler+0x1f8>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d01a      	beq.n	801279c <HAL_DMA_IRQHandler+0x15c>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a34      	ldr	r2, [pc, #208]	; (801283c <HAL_DMA_IRQHandler+0x1fc>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d012      	beq.n	8012796 <HAL_DMA_IRQHandler+0x156>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4a32      	ldr	r2, [pc, #200]	; (8012840 <HAL_DMA_IRQHandler+0x200>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d00a      	beq.n	8012790 <HAL_DMA_IRQHandler+0x150>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a31      	ldr	r2, [pc, #196]	; (8012844 <HAL_DMA_IRQHandler+0x204>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d102      	bne.n	801278a <HAL_DMA_IRQHandler+0x14a>
 8012784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012788:	e00e      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 801278a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801278e:	e00b      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 8012790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012794:	e008      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 8012796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801279a:	e005      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 801279c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127a0:	e002      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 80127a2:	2320      	movs	r3, #32
 80127a4:	e000      	b.n	80127a8 <HAL_DMA_IRQHandler+0x168>
 80127a6:	2302      	movs	r3, #2
 80127a8:	4a27      	ldr	r2, [pc, #156]	; (8012848 <HAL_DMA_IRQHandler+0x208>)
 80127aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d034      	beq.n	8012826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80127c4:	e02f      	b.n	8012826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127ca:	2208      	movs	r2, #8
 80127cc:	409a      	lsls	r2, r3
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	4013      	ands	r3, r2
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d028      	beq.n	8012828 <HAL_DMA_IRQHandler+0x1e8>
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f003 0308 	and.w	r3, r3, #8
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d023      	beq.n	8012828 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f022 020e 	bic.w	r2, r2, #14
 80127ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127f8:	2101      	movs	r1, #1
 80127fa:	fa01 f202 	lsl.w	r2, r1, r2
 80127fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2201      	movs	r2, #1
 8012804:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2201      	movs	r2, #1
 801280a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801281a:	2b00      	cmp	r3, #0
 801281c:	d004      	beq.n	8012828 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	4798      	blx	r3
    }
  }
  return;
 8012826:	bf00      	nop
 8012828:	bf00      	nop
}
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	40020008 	.word	0x40020008
 8012834:	4002001c 	.word	0x4002001c
 8012838:	40020030 	.word	0x40020030
 801283c:	40020044 	.word	0x40020044
 8012840:	40020058 	.word	0x40020058
 8012844:	4002006c 	.word	0x4002006c
 8012848:	40020000 	.word	0x40020000

0801284c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
 8012858:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012862:	2101      	movs	r1, #1
 8012864:	fa01 f202 	lsl.w	r2, r1, r2
 8012868:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	2b10      	cmp	r3, #16
 8012878:	d108      	bne.n	801288c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801288a:	e007      	b.n	801289c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	60da      	str	r2, [r3, #12]
}
 801289c:	bf00      	nop
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bc80      	pop	{r7}
 80128a4:	4770      	bx	lr
	...

080128a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80128a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128aa:	b087      	sub	sp, #28
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80128b6:	2301      	movs	r3, #1
 80128b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80128ba:	2300      	movs	r3, #0
 80128bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80128c2:	4b2f      	ldr	r3, [pc, #188]	; (8012980 <HAL_FLASH_Program+0xd8>)
 80128c4:	7e1b      	ldrb	r3, [r3, #24]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d101      	bne.n	80128ce <HAL_FLASH_Program+0x26>
 80128ca:	2302      	movs	r3, #2
 80128cc:	e054      	b.n	8012978 <HAL_FLASH_Program+0xd0>
 80128ce:	4b2c      	ldr	r3, [pc, #176]	; (8012980 <HAL_FLASH_Program+0xd8>)
 80128d0:	2201      	movs	r2, #1
 80128d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80128d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80128d8:	f000 f8b2 	bl	8012a40 <FLASH_WaitForLastOperation>
 80128dc:	4603      	mov	r3, r0
 80128de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80128e0:	7dfb      	ldrb	r3, [r7, #23]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d144      	bne.n	8012970 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d102      	bne.n	80128f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80128ec:	2301      	movs	r3, #1
 80128ee:	757b      	strb	r3, [r7, #21]
 80128f0:	e007      	b.n	8012902 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2b02      	cmp	r3, #2
 80128f6:	d102      	bne.n	80128fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80128f8:	2302      	movs	r3, #2
 80128fa:	757b      	strb	r3, [r7, #21]
 80128fc:	e001      	b.n	8012902 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80128fe:	2304      	movs	r3, #4
 8012900:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8012902:	2300      	movs	r3, #0
 8012904:	75bb      	strb	r3, [r7, #22]
 8012906:	e02d      	b.n	8012964 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8012908:	7dbb      	ldrb	r3, [r7, #22]
 801290a:	005a      	lsls	r2, r3, #1
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	eb02 0c03 	add.w	ip, r2, r3
 8012912:	7dbb      	ldrb	r3, [r7, #22]
 8012914:	0119      	lsls	r1, r3, #4
 8012916:	e9d7 2300 	ldrd	r2, r3, [r7]
 801291a:	f1c1 0620 	rsb	r6, r1, #32
 801291e:	f1a1 0020 	sub.w	r0, r1, #32
 8012922:	fa22 f401 	lsr.w	r4, r2, r1
 8012926:	fa03 f606 	lsl.w	r6, r3, r6
 801292a:	4334      	orrs	r4, r6
 801292c:	fa23 f000 	lsr.w	r0, r3, r0
 8012930:	4304      	orrs	r4, r0
 8012932:	fa23 f501 	lsr.w	r5, r3, r1
 8012936:	b2a3      	uxth	r3, r4
 8012938:	4619      	mov	r1, r3
 801293a:	4660      	mov	r0, ip
 801293c:	f000 f864 	bl	8012a08 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012940:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012944:	f000 f87c 	bl	8012a40 <FLASH_WaitForLastOperation>
 8012948:	4603      	mov	r3, r0
 801294a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801294c:	4b0d      	ldr	r3, [pc, #52]	; (8012984 <HAL_FLASH_Program+0xdc>)
 801294e:	691b      	ldr	r3, [r3, #16]
 8012950:	4a0c      	ldr	r2, [pc, #48]	; (8012984 <HAL_FLASH_Program+0xdc>)
 8012952:	f023 0301 	bic.w	r3, r3, #1
 8012956:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8012958:	7dfb      	ldrb	r3, [r7, #23]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d107      	bne.n	801296e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 801295e:	7dbb      	ldrb	r3, [r7, #22]
 8012960:	3301      	adds	r3, #1
 8012962:	75bb      	strb	r3, [r7, #22]
 8012964:	7dba      	ldrb	r2, [r7, #22]
 8012966:	7d7b      	ldrb	r3, [r7, #21]
 8012968:	429a      	cmp	r2, r3
 801296a:	d3cd      	bcc.n	8012908 <HAL_FLASH_Program+0x60>
 801296c:	e000      	b.n	8012970 <HAL_FLASH_Program+0xc8>
      {
        break;
 801296e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012970:	4b03      	ldr	r3, [pc, #12]	; (8012980 <HAL_FLASH_Program+0xd8>)
 8012972:	2200      	movs	r2, #0
 8012974:	761a      	strb	r2, [r3, #24]

  return status;
 8012976:	7dfb      	ldrb	r3, [r7, #23]
}
 8012978:	4618      	mov	r0, r3
 801297a:	371c      	adds	r7, #28
 801297c:	46bd      	mov	sp, r7
 801297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012980:	200030d0 	.word	0x200030d0
 8012984:	40022000 	.word	0x40022000

08012988 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012988:	b480      	push	{r7}
 801298a:	b083      	sub	sp, #12
 801298c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801298e:	2300      	movs	r3, #0
 8012990:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012992:	4b0d      	ldr	r3, [pc, #52]	; (80129c8 <HAL_FLASH_Unlock+0x40>)
 8012994:	691b      	ldr	r3, [r3, #16]
 8012996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00d      	beq.n	80129ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801299e:	4b0a      	ldr	r3, [pc, #40]	; (80129c8 <HAL_FLASH_Unlock+0x40>)
 80129a0:	4a0a      	ldr	r2, [pc, #40]	; (80129cc <HAL_FLASH_Unlock+0x44>)
 80129a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80129a4:	4b08      	ldr	r3, [pc, #32]	; (80129c8 <HAL_FLASH_Unlock+0x40>)
 80129a6:	4a0a      	ldr	r2, [pc, #40]	; (80129d0 <HAL_FLASH_Unlock+0x48>)
 80129a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80129aa:	4b07      	ldr	r3, [pc, #28]	; (80129c8 <HAL_FLASH_Unlock+0x40>)
 80129ac:	691b      	ldr	r3, [r3, #16]
 80129ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80129b6:	2301      	movs	r3, #1
 80129b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80129ba:	79fb      	ldrb	r3, [r7, #7]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bc80      	pop	{r7}
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	40022000 	.word	0x40022000
 80129cc:	45670123 	.word	0x45670123
 80129d0:	cdef89ab 	.word	0xcdef89ab

080129d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80129d4:	b480      	push	{r7}
 80129d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80129d8:	4b05      	ldr	r3, [pc, #20]	; (80129f0 <HAL_FLASH_Lock+0x1c>)
 80129da:	691b      	ldr	r3, [r3, #16]
 80129dc:	4a04      	ldr	r2, [pc, #16]	; (80129f0 <HAL_FLASH_Lock+0x1c>)
 80129de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80129e4:	2300      	movs	r3, #0
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bc80      	pop	{r7}
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop
 80129f0:	40022000 	.word	0x40022000

080129f4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80129f4:	b480      	push	{r7}
 80129f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80129f8:	4b02      	ldr	r3, [pc, #8]	; (8012a04 <HAL_FLASH_GetError+0x10>)
 80129fa:	69db      	ldr	r3, [r3, #28]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bc80      	pop	{r7}
 8012a02:	4770      	bx	lr
 8012a04:	200030d0 	.word	0x200030d0

08012a08 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012a14:	4b08      	ldr	r3, [pc, #32]	; (8012a38 <FLASH_Program_HalfWord+0x30>)
 8012a16:	2200      	movs	r2, #0
 8012a18:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012a1a:	4b08      	ldr	r3, [pc, #32]	; (8012a3c <FLASH_Program_HalfWord+0x34>)
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	4a07      	ldr	r2, [pc, #28]	; (8012a3c <FLASH_Program_HalfWord+0x34>)
 8012a20:	f043 0301 	orr.w	r3, r3, #1
 8012a24:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	887a      	ldrh	r2, [r7, #2]
 8012a2a:	801a      	strh	r2, [r3, #0]
}
 8012a2c:	bf00      	nop
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bc80      	pop	{r7}
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop
 8012a38:	200030d0 	.word	0x200030d0
 8012a3c:	40022000 	.word	0x40022000

08012a40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8012a48:	f7ff fb10 	bl	801206c <HAL_GetTick>
 8012a4c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012a4e:	e010      	b.n	8012a72 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a56:	d00c      	beq.n	8012a72 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d007      	beq.n	8012a6e <FLASH_WaitForLastOperation+0x2e>
 8012a5e:	f7ff fb05 	bl	801206c <HAL_GetTick>
 8012a62:	4602      	mov	r2, r0
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	1ad3      	subs	r3, r2, r3
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d201      	bcs.n	8012a72 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8012a6e:	2303      	movs	r3, #3
 8012a70:	e025      	b.n	8012abe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012a72:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	f003 0301 	and.w	r3, r3, #1
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1e8      	bne.n	8012a50 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012a7e:	4b12      	ldr	r3, [pc, #72]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	f003 0320 	and.w	r3, r3, #32
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d002      	beq.n	8012a90 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012a8c:	2220      	movs	r2, #32
 8012a8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8012a90:	4b0d      	ldr	r3, [pc, #52]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	f003 0310 	and.w	r3, r3, #16
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d10b      	bne.n	8012ab4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012a9e:	69db      	ldr	r3, [r3, #28]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d105      	bne.n	8012ab4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012aa8:	4b07      	ldr	r3, [pc, #28]	; (8012ac8 <FLASH_WaitForLastOperation+0x88>)
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d003      	beq.n	8012abc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8012ab4:	f000 f80a 	bl	8012acc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e000      	b.n	8012abe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8012abc:	2300      	movs	r3, #0
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	40022000 	.word	0x40022000

08012acc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8012ad6:	4b23      	ldr	r3, [pc, #140]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	f003 0310 	and.w	r3, r3, #16
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d009      	beq.n	8012af6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012ae2:	4b21      	ldr	r3, [pc, #132]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012ae4:	69db      	ldr	r3, [r3, #28]
 8012ae6:	f043 0302 	orr.w	r3, r3, #2
 8012aea:	4a1f      	ldr	r2, [pc, #124]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012aec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f043 0310 	orr.w	r3, r3, #16
 8012af4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8012af6:	4b1b      	ldr	r3, [pc, #108]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	f003 0304 	and.w	r3, r3, #4
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d009      	beq.n	8012b16 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8012b02:	4b19      	ldr	r3, [pc, #100]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012b04:	69db      	ldr	r3, [r3, #28]
 8012b06:	f043 0301 	orr.w	r3, r3, #1
 8012b0a:	4a17      	ldr	r2, [pc, #92]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012b0c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f043 0304 	orr.w	r3, r3, #4
 8012b14:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8012b16:	4b13      	ldr	r3, [pc, #76]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b18:	69db      	ldr	r3, [r3, #28]
 8012b1a:	f003 0301 	and.w	r3, r3, #1
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00b      	beq.n	8012b3a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8012b22:	4b11      	ldr	r3, [pc, #68]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012b24:	69db      	ldr	r3, [r3, #28]
 8012b26:	f043 0304 	orr.w	r3, r3, #4
 8012b2a:	4a0f      	ldr	r2, [pc, #60]	; (8012b68 <FLASH_SetErrorCode+0x9c>)
 8012b2c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b30:	69db      	ldr	r3, [r3, #28]
 8012b32:	4a0c      	ldr	r2, [pc, #48]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b34:	f023 0301 	bic.w	r3, r3, #1
 8012b38:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f240 1201 	movw	r2, #257	; 0x101
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d106      	bne.n	8012b52 <FLASH_SetErrorCode+0x86>
 8012b44:	4b07      	ldr	r3, [pc, #28]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b46:	69db      	ldr	r3, [r3, #28]
 8012b48:	4a06      	ldr	r2, [pc, #24]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b4a:	f023 0301 	bic.w	r3, r3, #1
 8012b4e:	61d3      	str	r3, [r2, #28]
}  
 8012b50:	e002      	b.n	8012b58 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8012b52:	4a04      	ldr	r2, [pc, #16]	; (8012b64 <FLASH_SetErrorCode+0x98>)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	60d3      	str	r3, [r2, #12]
}  
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bc80      	pop	{r7}
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	40022000 	.word	0x40022000
 8012b68:	200030d0 	.word	0x200030d0

08012b6c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012b76:	2301      	movs	r3, #1
 8012b78:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012b7e:	4b2f      	ldr	r3, [pc, #188]	; (8012c3c <HAL_FLASHEx_Erase+0xd0>)
 8012b80:	7e1b      	ldrb	r3, [r3, #24]
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d101      	bne.n	8012b8a <HAL_FLASHEx_Erase+0x1e>
 8012b86:	2302      	movs	r3, #2
 8012b88:	e053      	b.n	8012c32 <HAL_FLASHEx_Erase+0xc6>
 8012b8a:	4b2c      	ldr	r3, [pc, #176]	; (8012c3c <HAL_FLASHEx_Erase+0xd0>)
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2b02      	cmp	r3, #2
 8012b96:	d116      	bne.n	8012bc6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012b98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012b9c:	f7ff ff50 	bl	8012a40 <FLASH_WaitForLastOperation>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d141      	bne.n	8012c2a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8012ba6:	2001      	movs	r0, #1
 8012ba8:	f000 f84c 	bl	8012c44 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012bb0:	f7ff ff46 	bl	8012a40 <FLASH_WaitForLastOperation>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8012bb8:	4b21      	ldr	r3, [pc, #132]	; (8012c40 <HAL_FLASHEx_Erase+0xd4>)
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	4a20      	ldr	r2, [pc, #128]	; (8012c40 <HAL_FLASHEx_Erase+0xd4>)
 8012bbe:	f023 0304 	bic.w	r3, r3, #4
 8012bc2:	6113      	str	r3, [r2, #16]
 8012bc4:	e031      	b.n	8012c2a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012bc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012bca:	f7ff ff39 	bl	8012a40 <FLASH_WaitForLastOperation>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d12a      	bne.n	8012c2a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bda:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	60bb      	str	r3, [r7, #8]
 8012be2:	e019      	b.n	8012c18 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8012be4:	68b8      	ldr	r0, [r7, #8]
 8012be6:	f000 f849 	bl	8012c7c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012bea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012bee:	f7ff ff27 	bl	8012a40 <FLASH_WaitForLastOperation>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8012bf6:	4b12      	ldr	r3, [pc, #72]	; (8012c40 <HAL_FLASHEx_Erase+0xd4>)
 8012bf8:	691b      	ldr	r3, [r3, #16]
 8012bfa:	4a11      	ldr	r2, [pc, #68]	; (8012c40 <HAL_FLASHEx_Erase+0xd4>)
 8012bfc:	f023 0302 	bic.w	r3, r3, #2
 8012c00:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d003      	beq.n	8012c10 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	601a      	str	r2, [r3, #0]
            break;
 8012c0e:	e00c      	b.n	8012c2a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c16:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	029a      	lsls	r2, r3, #10
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8012c24:	68ba      	ldr	r2, [r7, #8]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d3dc      	bcc.n	8012be4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012c2a:	4b04      	ldr	r3, [pc, #16]	; (8012c3c <HAL_FLASHEx_Erase+0xd0>)
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	761a      	strb	r2, [r3, #24]

  return status;
 8012c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	200030d0 	.word	0x200030d0
 8012c40:	40022000 	.word	0x40022000

08012c44 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012c4c:	4b09      	ldr	r3, [pc, #36]	; (8012c74 <FLASH_MassErase+0x30>)
 8012c4e:	2200      	movs	r2, #0
 8012c50:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8012c52:	4b09      	ldr	r3, [pc, #36]	; (8012c78 <FLASH_MassErase+0x34>)
 8012c54:	691b      	ldr	r3, [r3, #16]
 8012c56:	4a08      	ldr	r2, [pc, #32]	; (8012c78 <FLASH_MassErase+0x34>)
 8012c58:	f043 0304 	orr.w	r3, r3, #4
 8012c5c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012c5e:	4b06      	ldr	r3, [pc, #24]	; (8012c78 <FLASH_MassErase+0x34>)
 8012c60:	691b      	ldr	r3, [r3, #16]
 8012c62:	4a05      	ldr	r2, [pc, #20]	; (8012c78 <FLASH_MassErase+0x34>)
 8012c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c68:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8012c6a:	bf00      	nop
 8012c6c:	370c      	adds	r7, #12
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bc80      	pop	{r7}
 8012c72:	4770      	bx	lr
 8012c74:	200030d0 	.word	0x200030d0
 8012c78:	40022000 	.word	0x40022000

08012c7c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012c84:	4b0b      	ldr	r3, [pc, #44]	; (8012cb4 <FLASH_PageErase+0x38>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012c8a:	4b0b      	ldr	r3, [pc, #44]	; (8012cb8 <FLASH_PageErase+0x3c>)
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	4a0a      	ldr	r2, [pc, #40]	; (8012cb8 <FLASH_PageErase+0x3c>)
 8012c90:	f043 0302 	orr.w	r3, r3, #2
 8012c94:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012c96:	4a08      	ldr	r2, [pc, #32]	; (8012cb8 <FLASH_PageErase+0x3c>)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012c9c:	4b06      	ldr	r3, [pc, #24]	; (8012cb8 <FLASH_PageErase+0x3c>)
 8012c9e:	691b      	ldr	r3, [r3, #16]
 8012ca0:	4a05      	ldr	r2, [pc, #20]	; (8012cb8 <FLASH_PageErase+0x3c>)
 8012ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ca6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8012ca8:	bf00      	nop
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bc80      	pop	{r7}
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	200030d0 	.word	0x200030d0
 8012cb8:	40022000 	.word	0x40022000

08012cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b08b      	sub	sp, #44	; 0x2c
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012cce:	e169      	b.n	8012fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	69fa      	ldr	r2, [r7, #28]
 8012ce0:	4013      	ands	r3, r2
 8012ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8012ce4:	69ba      	ldr	r2, [r7, #24]
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	f040 8158 	bne.w	8012f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	4a9a      	ldr	r2, [pc, #616]	; (8012f5c <HAL_GPIO_Init+0x2a0>)
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	d05e      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
 8012cf8:	4a98      	ldr	r2, [pc, #608]	; (8012f5c <HAL_GPIO_Init+0x2a0>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d875      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012cfe:	4a98      	ldr	r2, [pc, #608]	; (8012f60 <HAL_GPIO_Init+0x2a4>)
 8012d00:	4293      	cmp	r3, r2
 8012d02:	d058      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
 8012d04:	4a96      	ldr	r2, [pc, #600]	; (8012f60 <HAL_GPIO_Init+0x2a4>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d86f      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012d0a:	4a96      	ldr	r2, [pc, #600]	; (8012f64 <HAL_GPIO_Init+0x2a8>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d052      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
 8012d10:	4a94      	ldr	r2, [pc, #592]	; (8012f64 <HAL_GPIO_Init+0x2a8>)
 8012d12:	4293      	cmp	r3, r2
 8012d14:	d869      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012d16:	4a94      	ldr	r2, [pc, #592]	; (8012f68 <HAL_GPIO_Init+0x2ac>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d04c      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
 8012d1c:	4a92      	ldr	r2, [pc, #584]	; (8012f68 <HAL_GPIO_Init+0x2ac>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d863      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012d22:	4a92      	ldr	r2, [pc, #584]	; (8012f6c <HAL_GPIO_Init+0x2b0>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d046      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
 8012d28:	4a90      	ldr	r2, [pc, #576]	; (8012f6c <HAL_GPIO_Init+0x2b0>)
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d85d      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012d2e:	2b12      	cmp	r3, #18
 8012d30:	d82a      	bhi.n	8012d88 <HAL_GPIO_Init+0xcc>
 8012d32:	2b12      	cmp	r3, #18
 8012d34:	d859      	bhi.n	8012dea <HAL_GPIO_Init+0x12e>
 8012d36:	a201      	add	r2, pc, #4	; (adr r2, 8012d3c <HAL_GPIO_Init+0x80>)
 8012d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d3c:	08012db7 	.word	0x08012db7
 8012d40:	08012d91 	.word	0x08012d91
 8012d44:	08012da3 	.word	0x08012da3
 8012d48:	08012de5 	.word	0x08012de5
 8012d4c:	08012deb 	.word	0x08012deb
 8012d50:	08012deb 	.word	0x08012deb
 8012d54:	08012deb 	.word	0x08012deb
 8012d58:	08012deb 	.word	0x08012deb
 8012d5c:	08012deb 	.word	0x08012deb
 8012d60:	08012deb 	.word	0x08012deb
 8012d64:	08012deb 	.word	0x08012deb
 8012d68:	08012deb 	.word	0x08012deb
 8012d6c:	08012deb 	.word	0x08012deb
 8012d70:	08012deb 	.word	0x08012deb
 8012d74:	08012deb 	.word	0x08012deb
 8012d78:	08012deb 	.word	0x08012deb
 8012d7c:	08012deb 	.word	0x08012deb
 8012d80:	08012d99 	.word	0x08012d99
 8012d84:	08012dad 	.word	0x08012dad
 8012d88:	4a79      	ldr	r2, [pc, #484]	; (8012f70 <HAL_GPIO_Init+0x2b4>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d013      	beq.n	8012db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8012d8e:	e02c      	b.n	8012dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	623b      	str	r3, [r7, #32]
          break;
 8012d96:	e029      	b.n	8012dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	3304      	adds	r3, #4
 8012d9e:	623b      	str	r3, [r7, #32]
          break;
 8012da0:	e024      	b.n	8012dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	3308      	adds	r3, #8
 8012da8:	623b      	str	r3, [r7, #32]
          break;
 8012daa:	e01f      	b.n	8012dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	330c      	adds	r3, #12
 8012db2:	623b      	str	r3, [r7, #32]
          break;
 8012db4:	e01a      	b.n	8012dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d102      	bne.n	8012dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8012dbe:	2304      	movs	r3, #4
 8012dc0:	623b      	str	r3, [r7, #32]
          break;
 8012dc2:	e013      	b.n	8012dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d105      	bne.n	8012dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8012dcc:	2308      	movs	r3, #8
 8012dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	69fa      	ldr	r2, [r7, #28]
 8012dd4:	611a      	str	r2, [r3, #16]
          break;
 8012dd6:	e009      	b.n	8012dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8012dd8:	2308      	movs	r3, #8
 8012dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	69fa      	ldr	r2, [r7, #28]
 8012de0:	615a      	str	r2, [r3, #20]
          break;
 8012de2:	e003      	b.n	8012dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8012de4:	2300      	movs	r3, #0
 8012de6:	623b      	str	r3, [r7, #32]
          break;
 8012de8:	e000      	b.n	8012dec <HAL_GPIO_Init+0x130>
          break;
 8012dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	2bff      	cmp	r3, #255	; 0xff
 8012df0:	d801      	bhi.n	8012df6 <HAL_GPIO_Init+0x13a>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	e001      	b.n	8012dfa <HAL_GPIO_Init+0x13e>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	3304      	adds	r3, #4
 8012dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	2bff      	cmp	r3, #255	; 0xff
 8012e00:	d802      	bhi.n	8012e08 <HAL_GPIO_Init+0x14c>
 8012e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	e002      	b.n	8012e0e <HAL_GPIO_Init+0x152>
 8012e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0a:	3b08      	subs	r3, #8
 8012e0c:	009b      	lsls	r3, r3, #2
 8012e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	210f      	movs	r1, #15
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	fa01 f303 	lsl.w	r3, r1, r3
 8012e1c:	43db      	mvns	r3, r3
 8012e1e:	401a      	ands	r2, r3
 8012e20:	6a39      	ldr	r1, [r7, #32]
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	fa01 f303 	lsl.w	r3, r1, r3
 8012e28:	431a      	orrs	r2, r3
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	f000 80b1 	beq.w	8012f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8012e3c:	4b4d      	ldr	r3, [pc, #308]	; (8012f74 <HAL_GPIO_Init+0x2b8>)
 8012e3e:	699b      	ldr	r3, [r3, #24]
 8012e40:	4a4c      	ldr	r2, [pc, #304]	; (8012f74 <HAL_GPIO_Init+0x2b8>)
 8012e42:	f043 0301 	orr.w	r3, r3, #1
 8012e46:	6193      	str	r3, [r2, #24]
 8012e48:	4b4a      	ldr	r3, [pc, #296]	; (8012f74 <HAL_GPIO_Init+0x2b8>)
 8012e4a:	699b      	ldr	r3, [r3, #24]
 8012e4c:	f003 0301 	and.w	r3, r3, #1
 8012e50:	60bb      	str	r3, [r7, #8]
 8012e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8012e54:	4a48      	ldr	r2, [pc, #288]	; (8012f78 <HAL_GPIO_Init+0x2bc>)
 8012e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e58:	089b      	lsrs	r3, r3, #2
 8012e5a:	3302      	adds	r3, #2
 8012e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8012e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e64:	f003 0303 	and.w	r3, r3, #3
 8012e68:	009b      	lsls	r3, r3, #2
 8012e6a:	220f      	movs	r2, #15
 8012e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012e70:	43db      	mvns	r3, r3
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	4013      	ands	r3, r2
 8012e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4a40      	ldr	r2, [pc, #256]	; (8012f7c <HAL_GPIO_Init+0x2c0>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d013      	beq.n	8012ea8 <HAL_GPIO_Init+0x1ec>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a3f      	ldr	r2, [pc, #252]	; (8012f80 <HAL_GPIO_Init+0x2c4>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d00d      	beq.n	8012ea4 <HAL_GPIO_Init+0x1e8>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a3e      	ldr	r2, [pc, #248]	; (8012f84 <HAL_GPIO_Init+0x2c8>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d007      	beq.n	8012ea0 <HAL_GPIO_Init+0x1e4>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4a3d      	ldr	r2, [pc, #244]	; (8012f88 <HAL_GPIO_Init+0x2cc>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d101      	bne.n	8012e9c <HAL_GPIO_Init+0x1e0>
 8012e98:	2303      	movs	r3, #3
 8012e9a:	e006      	b.n	8012eaa <HAL_GPIO_Init+0x1ee>
 8012e9c:	2304      	movs	r3, #4
 8012e9e:	e004      	b.n	8012eaa <HAL_GPIO_Init+0x1ee>
 8012ea0:	2302      	movs	r3, #2
 8012ea2:	e002      	b.n	8012eaa <HAL_GPIO_Init+0x1ee>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	e000      	b.n	8012eaa <HAL_GPIO_Init+0x1ee>
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eac:	f002 0203 	and.w	r2, r2, #3
 8012eb0:	0092      	lsls	r2, r2, #2
 8012eb2:	4093      	lsls	r3, r2
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	4313      	orrs	r3, r2
 8012eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8012eba:	492f      	ldr	r1, [pc, #188]	; (8012f78 <HAL_GPIO_Init+0x2bc>)
 8012ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ebe:	089b      	lsrs	r3, r3, #2
 8012ec0:	3302      	adds	r3, #2
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d006      	beq.n	8012ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8012ed4:	4b2d      	ldr	r3, [pc, #180]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	492c      	ldr	r1, [pc, #176]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	4313      	orrs	r3, r2
 8012ede:	600b      	str	r3, [r1, #0]
 8012ee0:	e006      	b.n	8012ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8012ee2:	4b2a      	ldr	r3, [pc, #168]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	43db      	mvns	r3, r3
 8012eea:	4928      	ldr	r1, [pc, #160]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012eec:	4013      	ands	r3, r2
 8012eee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d006      	beq.n	8012f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8012efc:	4b23      	ldr	r3, [pc, #140]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012efe:	685a      	ldr	r2, [r3, #4]
 8012f00:	4922      	ldr	r1, [pc, #136]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	4313      	orrs	r3, r2
 8012f06:	604b      	str	r3, [r1, #4]
 8012f08:	e006      	b.n	8012f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8012f0a:	4b20      	ldr	r3, [pc, #128]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f0c:	685a      	ldr	r2, [r3, #4]
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	43db      	mvns	r3, r3
 8012f12:	491e      	ldr	r1, [pc, #120]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f14:	4013      	ands	r3, r2
 8012f16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d006      	beq.n	8012f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8012f24:	4b19      	ldr	r3, [pc, #100]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f26:	689a      	ldr	r2, [r3, #8]
 8012f28:	4918      	ldr	r1, [pc, #96]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	608b      	str	r3, [r1, #8]
 8012f30:	e006      	b.n	8012f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8012f32:	4b16      	ldr	r3, [pc, #88]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f34:	689a      	ldr	r2, [r3, #8]
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	43db      	mvns	r3, r3
 8012f3a:	4914      	ldr	r1, [pc, #80]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d021      	beq.n	8012f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8012f4c:	4b0f      	ldr	r3, [pc, #60]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f4e:	68da      	ldr	r2, [r3, #12]
 8012f50:	490e      	ldr	r1, [pc, #56]	; (8012f8c <HAL_GPIO_Init+0x2d0>)
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	4313      	orrs	r3, r2
 8012f56:	60cb      	str	r3, [r1, #12]
 8012f58:	e021      	b.n	8012f9e <HAL_GPIO_Init+0x2e2>
 8012f5a:	bf00      	nop
 8012f5c:	10320000 	.word	0x10320000
 8012f60:	10310000 	.word	0x10310000
 8012f64:	10220000 	.word	0x10220000
 8012f68:	10210000 	.word	0x10210000
 8012f6c:	10120000 	.word	0x10120000
 8012f70:	10110000 	.word	0x10110000
 8012f74:	40021000 	.word	0x40021000
 8012f78:	40010000 	.word	0x40010000
 8012f7c:	40010800 	.word	0x40010800
 8012f80:	40010c00 	.word	0x40010c00
 8012f84:	40011000 	.word	0x40011000
 8012f88:	40011400 	.word	0x40011400
 8012f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8012f90:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <HAL_GPIO_Init+0x304>)
 8012f92:	68da      	ldr	r2, [r3, #12]
 8012f94:	69bb      	ldr	r3, [r7, #24]
 8012f96:	43db      	mvns	r3, r3
 8012f98:	4909      	ldr	r1, [pc, #36]	; (8012fc0 <HAL_GPIO_Init+0x304>)
 8012f9a:	4013      	ands	r3, r2
 8012f9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	fa22 f303 	lsr.w	r3, r2, r3
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f47f ae8e 	bne.w	8012cd0 <HAL_GPIO_Init+0x14>
  }
}
 8012fb4:	bf00      	nop
 8012fb6:	bf00      	nop
 8012fb8:	372c      	adds	r7, #44	; 0x2c
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bc80      	pop	{r7}
 8012fbe:	4770      	bx	lr
 8012fc0:	40010400 	.word	0x40010400

08012fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d101      	bne.n	8012fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e26c      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	f003 0301 	and.w	r3, r3, #1
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f000 8087 	beq.w	80130f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012fe4:	4b92      	ldr	r3, [pc, #584]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	f003 030c 	and.w	r3, r3, #12
 8012fec:	2b04      	cmp	r3, #4
 8012fee:	d00c      	beq.n	801300a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012ff0:	4b8f      	ldr	r3, [pc, #572]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	f003 030c 	and.w	r3, r3, #12
 8012ff8:	2b08      	cmp	r3, #8
 8012ffa:	d112      	bne.n	8013022 <HAL_RCC_OscConfig+0x5e>
 8012ffc:	4b8c      	ldr	r3, [pc, #560]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013008:	d10b      	bne.n	8013022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801300a:	4b89      	ldr	r3, [pc, #548]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013012:	2b00      	cmp	r3, #0
 8013014:	d06c      	beq.n	80130f0 <HAL_RCC_OscConfig+0x12c>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d168      	bne.n	80130f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	e246      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801302a:	d106      	bne.n	801303a <HAL_RCC_OscConfig+0x76>
 801302c:	4b80      	ldr	r3, [pc, #512]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	4a7f      	ldr	r2, [pc, #508]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013036:	6013      	str	r3, [r2, #0]
 8013038:	e02e      	b.n	8013098 <HAL_RCC_OscConfig+0xd4>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d10c      	bne.n	801305c <HAL_RCC_OscConfig+0x98>
 8013042:	4b7b      	ldr	r3, [pc, #492]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	4a7a      	ldr	r2, [pc, #488]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	4b78      	ldr	r3, [pc, #480]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4a77      	ldr	r2, [pc, #476]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013058:	6013      	str	r3, [r2, #0]
 801305a:	e01d      	b.n	8013098 <HAL_RCC_OscConfig+0xd4>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013064:	d10c      	bne.n	8013080 <HAL_RCC_OscConfig+0xbc>
 8013066:	4b72      	ldr	r3, [pc, #456]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4a71      	ldr	r2, [pc, #452]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013070:	6013      	str	r3, [r2, #0]
 8013072:	4b6f      	ldr	r3, [pc, #444]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a6e      	ldr	r2, [pc, #440]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801307c:	6013      	str	r3, [r2, #0]
 801307e:	e00b      	b.n	8013098 <HAL_RCC_OscConfig+0xd4>
 8013080:	4b6b      	ldr	r3, [pc, #428]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	4a6a      	ldr	r2, [pc, #424]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801308a:	6013      	str	r3, [r2, #0]
 801308c:	4b68      	ldr	r3, [pc, #416]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a67      	ldr	r2, [pc, #412]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d013      	beq.n	80130c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130a0:	f7fe ffe4 	bl	801206c <HAL_GetTick>
 80130a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80130a6:	e008      	b.n	80130ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80130a8:	f7fe ffe0 	bl	801206c <HAL_GetTick>
 80130ac:	4602      	mov	r2, r0
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	1ad3      	subs	r3, r2, r3
 80130b2:	2b64      	cmp	r3, #100	; 0x64
 80130b4:	d901      	bls.n	80130ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80130b6:	2303      	movs	r3, #3
 80130b8:	e1fa      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80130ba:	4b5d      	ldr	r3, [pc, #372]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d0f0      	beq.n	80130a8 <HAL_RCC_OscConfig+0xe4>
 80130c6:	e014      	b.n	80130f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130c8:	f7fe ffd0 	bl	801206c <HAL_GetTick>
 80130cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80130ce:	e008      	b.n	80130e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80130d0:	f7fe ffcc 	bl	801206c <HAL_GetTick>
 80130d4:	4602      	mov	r2, r0
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	2b64      	cmp	r3, #100	; 0x64
 80130dc:	d901      	bls.n	80130e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80130de:	2303      	movs	r3, #3
 80130e0:	e1e6      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80130e2:	4b53      	ldr	r3, [pc, #332]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1f0      	bne.n	80130d0 <HAL_RCC_OscConfig+0x10c>
 80130ee:	e000      	b.n	80130f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80130f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	f003 0302 	and.w	r3, r3, #2
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d063      	beq.n	80131c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80130fe:	4b4c      	ldr	r3, [pc, #304]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	f003 030c 	and.w	r3, r3, #12
 8013106:	2b00      	cmp	r3, #0
 8013108:	d00b      	beq.n	8013122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 801310a:	4b49      	ldr	r3, [pc, #292]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	f003 030c 	and.w	r3, r3, #12
 8013112:	2b08      	cmp	r3, #8
 8013114:	d11c      	bne.n	8013150 <HAL_RCC_OscConfig+0x18c>
 8013116:	4b46      	ldr	r3, [pc, #280]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801311e:	2b00      	cmp	r3, #0
 8013120:	d116      	bne.n	8013150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013122:	4b43      	ldr	r3, [pc, #268]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f003 0302 	and.w	r3, r3, #2
 801312a:	2b00      	cmp	r3, #0
 801312c:	d005      	beq.n	801313a <HAL_RCC_OscConfig+0x176>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	2b01      	cmp	r3, #1
 8013134:	d001      	beq.n	801313a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8013136:	2301      	movs	r3, #1
 8013138:	e1ba      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801313a:	4b3d      	ldr	r3, [pc, #244]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	695b      	ldr	r3, [r3, #20]
 8013146:	00db      	lsls	r3, r3, #3
 8013148:	4939      	ldr	r1, [pc, #228]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801314a:	4313      	orrs	r3, r2
 801314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801314e:	e03a      	b.n	80131c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	691b      	ldr	r3, [r3, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d020      	beq.n	801319a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013158:	4b36      	ldr	r3, [pc, #216]	; (8013234 <HAL_RCC_OscConfig+0x270>)
 801315a:	2201      	movs	r2, #1
 801315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801315e:	f7fe ff85 	bl	801206c <HAL_GetTick>
 8013162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013164:	e008      	b.n	8013178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013166:	f7fe ff81 	bl	801206c <HAL_GetTick>
 801316a:	4602      	mov	r2, r0
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	1ad3      	subs	r3, r2, r3
 8013170:	2b02      	cmp	r3, #2
 8013172:	d901      	bls.n	8013178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8013174:	2303      	movs	r3, #3
 8013176:	e19b      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013178:	4b2d      	ldr	r3, [pc, #180]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f003 0302 	and.w	r3, r3, #2
 8013180:	2b00      	cmp	r3, #0
 8013182:	d0f0      	beq.n	8013166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013184:	4b2a      	ldr	r3, [pc, #168]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	695b      	ldr	r3, [r3, #20]
 8013190:	00db      	lsls	r3, r3, #3
 8013192:	4927      	ldr	r1, [pc, #156]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 8013194:	4313      	orrs	r3, r2
 8013196:	600b      	str	r3, [r1, #0]
 8013198:	e015      	b.n	80131c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801319a:	4b26      	ldr	r3, [pc, #152]	; (8013234 <HAL_RCC_OscConfig+0x270>)
 801319c:	2200      	movs	r2, #0
 801319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131a0:	f7fe ff64 	bl	801206c <HAL_GetTick>
 80131a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80131a6:	e008      	b.n	80131ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80131a8:	f7fe ff60 	bl	801206c <HAL_GetTick>
 80131ac:	4602      	mov	r2, r0
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d901      	bls.n	80131ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80131b6:	2303      	movs	r3, #3
 80131b8:	e17a      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80131ba:	4b1d      	ldr	r3, [pc, #116]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	f003 0302 	and.w	r3, r3, #2
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d1f0      	bne.n	80131a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f003 0308 	and.w	r3, r3, #8
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d03a      	beq.n	8013248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d019      	beq.n	801320e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80131da:	4b17      	ldr	r3, [pc, #92]	; (8013238 <HAL_RCC_OscConfig+0x274>)
 80131dc:	2201      	movs	r2, #1
 80131de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80131e0:	f7fe ff44 	bl	801206c <HAL_GetTick>
 80131e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80131e6:	e008      	b.n	80131fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80131e8:	f7fe ff40 	bl	801206c <HAL_GetTick>
 80131ec:	4602      	mov	r2, r0
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	2b02      	cmp	r3, #2
 80131f4:	d901      	bls.n	80131fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80131f6:	2303      	movs	r3, #3
 80131f8:	e15a      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80131fa:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <HAL_RCC_OscConfig+0x26c>)
 80131fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fe:	f003 0302 	and.w	r3, r3, #2
 8013202:	2b00      	cmp	r3, #0
 8013204:	d0f0      	beq.n	80131e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8013206:	2001      	movs	r0, #1
 8013208:	f000 fad8 	bl	80137bc <RCC_Delay>
 801320c:	e01c      	b.n	8013248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801320e:	4b0a      	ldr	r3, [pc, #40]	; (8013238 <HAL_RCC_OscConfig+0x274>)
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013214:	f7fe ff2a 	bl	801206c <HAL_GetTick>
 8013218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801321a:	e00f      	b.n	801323c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801321c:	f7fe ff26 	bl	801206c <HAL_GetTick>
 8013220:	4602      	mov	r2, r0
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	2b02      	cmp	r3, #2
 8013228:	d908      	bls.n	801323c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 801322a:	2303      	movs	r3, #3
 801322c:	e140      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
 801322e:	bf00      	nop
 8013230:	40021000 	.word	0x40021000
 8013234:	42420000 	.word	0x42420000
 8013238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801323c:	4b9e      	ldr	r3, [pc, #632]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013240:	f003 0302 	and.w	r3, r3, #2
 8013244:	2b00      	cmp	r3, #0
 8013246:	d1e9      	bne.n	801321c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f003 0304 	and.w	r3, r3, #4
 8013250:	2b00      	cmp	r3, #0
 8013252:	f000 80a6 	beq.w	80133a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013256:	2300      	movs	r3, #0
 8013258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801325a:	4b97      	ldr	r3, [pc, #604]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801325c:	69db      	ldr	r3, [r3, #28]
 801325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013262:	2b00      	cmp	r3, #0
 8013264:	d10d      	bne.n	8013282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013266:	4b94      	ldr	r3, [pc, #592]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013268:	69db      	ldr	r3, [r3, #28]
 801326a:	4a93      	ldr	r2, [pc, #588]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013270:	61d3      	str	r3, [r2, #28]
 8013272:	4b91      	ldr	r3, [pc, #580]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013274:	69db      	ldr	r3, [r3, #28]
 8013276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801327a:	60bb      	str	r3, [r7, #8]
 801327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801327e:	2301      	movs	r3, #1
 8013280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013282:	4b8e      	ldr	r3, [pc, #568]	; (80134bc <HAL_RCC_OscConfig+0x4f8>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801328a:	2b00      	cmp	r3, #0
 801328c:	d118      	bne.n	80132c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801328e:	4b8b      	ldr	r3, [pc, #556]	; (80134bc <HAL_RCC_OscConfig+0x4f8>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a8a      	ldr	r2, [pc, #552]	; (80134bc <HAL_RCC_OscConfig+0x4f8>)
 8013294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801329a:	f7fe fee7 	bl	801206c <HAL_GetTick>
 801329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80132a0:	e008      	b.n	80132b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80132a2:	f7fe fee3 	bl	801206c <HAL_GetTick>
 80132a6:	4602      	mov	r2, r0
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	1ad3      	subs	r3, r2, r3
 80132ac:	2b64      	cmp	r3, #100	; 0x64
 80132ae:	d901      	bls.n	80132b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e0fd      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80132b4:	4b81      	ldr	r3, [pc, #516]	; (80134bc <HAL_RCC_OscConfig+0x4f8>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d0f0      	beq.n	80132a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d106      	bne.n	80132d6 <HAL_RCC_OscConfig+0x312>
 80132c8:	4b7b      	ldr	r3, [pc, #492]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132ca:	6a1b      	ldr	r3, [r3, #32]
 80132cc:	4a7a      	ldr	r2, [pc, #488]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132ce:	f043 0301 	orr.w	r3, r3, #1
 80132d2:	6213      	str	r3, [r2, #32]
 80132d4:	e02d      	b.n	8013332 <HAL_RCC_OscConfig+0x36e>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d10c      	bne.n	80132f8 <HAL_RCC_OscConfig+0x334>
 80132de:	4b76      	ldr	r3, [pc, #472]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132e0:	6a1b      	ldr	r3, [r3, #32]
 80132e2:	4a75      	ldr	r2, [pc, #468]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132e4:	f023 0301 	bic.w	r3, r3, #1
 80132e8:	6213      	str	r3, [r2, #32]
 80132ea:	4b73      	ldr	r3, [pc, #460]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132ec:	6a1b      	ldr	r3, [r3, #32]
 80132ee:	4a72      	ldr	r2, [pc, #456]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80132f0:	f023 0304 	bic.w	r3, r3, #4
 80132f4:	6213      	str	r3, [r2, #32]
 80132f6:	e01c      	b.n	8013332 <HAL_RCC_OscConfig+0x36e>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	2b05      	cmp	r3, #5
 80132fe:	d10c      	bne.n	801331a <HAL_RCC_OscConfig+0x356>
 8013300:	4b6d      	ldr	r3, [pc, #436]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013302:	6a1b      	ldr	r3, [r3, #32]
 8013304:	4a6c      	ldr	r2, [pc, #432]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013306:	f043 0304 	orr.w	r3, r3, #4
 801330a:	6213      	str	r3, [r2, #32]
 801330c:	4b6a      	ldr	r3, [pc, #424]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801330e:	6a1b      	ldr	r3, [r3, #32]
 8013310:	4a69      	ldr	r2, [pc, #420]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013312:	f043 0301 	orr.w	r3, r3, #1
 8013316:	6213      	str	r3, [r2, #32]
 8013318:	e00b      	b.n	8013332 <HAL_RCC_OscConfig+0x36e>
 801331a:	4b67      	ldr	r3, [pc, #412]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801331c:	6a1b      	ldr	r3, [r3, #32]
 801331e:	4a66      	ldr	r2, [pc, #408]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013320:	f023 0301 	bic.w	r3, r3, #1
 8013324:	6213      	str	r3, [r2, #32]
 8013326:	4b64      	ldr	r3, [pc, #400]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013328:	6a1b      	ldr	r3, [r3, #32]
 801332a:	4a63      	ldr	r2, [pc, #396]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801332c:	f023 0304 	bic.w	r3, r3, #4
 8013330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	68db      	ldr	r3, [r3, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d015      	beq.n	8013366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801333a:	f7fe fe97 	bl	801206c <HAL_GetTick>
 801333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013340:	e00a      	b.n	8013358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013342:	f7fe fe93 	bl	801206c <HAL_GetTick>
 8013346:	4602      	mov	r2, r0
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013350:	4293      	cmp	r3, r2
 8013352:	d901      	bls.n	8013358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8013354:	2303      	movs	r3, #3
 8013356:	e0ab      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013358:	4b57      	ldr	r3, [pc, #348]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801335a:	6a1b      	ldr	r3, [r3, #32]
 801335c:	f003 0302 	and.w	r3, r3, #2
 8013360:	2b00      	cmp	r3, #0
 8013362:	d0ee      	beq.n	8013342 <HAL_RCC_OscConfig+0x37e>
 8013364:	e014      	b.n	8013390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013366:	f7fe fe81 	bl	801206c <HAL_GetTick>
 801336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801336c:	e00a      	b.n	8013384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801336e:	f7fe fe7d 	bl	801206c <HAL_GetTick>
 8013372:	4602      	mov	r2, r0
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	f241 3288 	movw	r2, #5000	; 0x1388
 801337c:	4293      	cmp	r3, r2
 801337e:	d901      	bls.n	8013384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8013380:	2303      	movs	r3, #3
 8013382:	e095      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013384:	4b4c      	ldr	r3, [pc, #304]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013386:	6a1b      	ldr	r3, [r3, #32]
 8013388:	f003 0302 	and.w	r3, r3, #2
 801338c:	2b00      	cmp	r3, #0
 801338e:	d1ee      	bne.n	801336e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d105      	bne.n	80133a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013396:	4b48      	ldr	r3, [pc, #288]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013398:	69db      	ldr	r3, [r3, #28]
 801339a:	4a47      	ldr	r2, [pc, #284]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80133a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	69db      	ldr	r3, [r3, #28]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	f000 8081 	beq.w	80134ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80133ac:	4b42      	ldr	r3, [pc, #264]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	f003 030c 	and.w	r3, r3, #12
 80133b4:	2b08      	cmp	r3, #8
 80133b6:	d061      	beq.n	801347c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	69db      	ldr	r3, [r3, #28]
 80133bc:	2b02      	cmp	r3, #2
 80133be:	d146      	bne.n	801344e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80133c0:	4b3f      	ldr	r3, [pc, #252]	; (80134c0 <HAL_RCC_OscConfig+0x4fc>)
 80133c2:	2200      	movs	r2, #0
 80133c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133c6:	f7fe fe51 	bl	801206c <HAL_GetTick>
 80133ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80133cc:	e008      	b.n	80133e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80133ce:	f7fe fe4d 	bl	801206c <HAL_GetTick>
 80133d2:	4602      	mov	r2, r0
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d901      	bls.n	80133e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80133dc:	2303      	movs	r3, #3
 80133de:	e067      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80133e0:	4b35      	ldr	r3, [pc, #212]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d1f0      	bne.n	80133ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6a1b      	ldr	r3, [r3, #32]
 80133f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133f4:	d108      	bne.n	8013408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80133f6:	4b30      	ldr	r3, [pc, #192]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	689b      	ldr	r3, [r3, #8]
 8013402:	492d      	ldr	r1, [pc, #180]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013404:	4313      	orrs	r3, r2
 8013406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013408:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6a19      	ldr	r1, [r3, #32]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013418:	430b      	orrs	r3, r1
 801341a:	4927      	ldr	r1, [pc, #156]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801341c:	4313      	orrs	r3, r2
 801341e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013420:	4b27      	ldr	r3, [pc, #156]	; (80134c0 <HAL_RCC_OscConfig+0x4fc>)
 8013422:	2201      	movs	r2, #1
 8013424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013426:	f7fe fe21 	bl	801206c <HAL_GetTick>
 801342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801342c:	e008      	b.n	8013440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801342e:	f7fe fe1d 	bl	801206c <HAL_GetTick>
 8013432:	4602      	mov	r2, r0
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	1ad3      	subs	r3, r2, r3
 8013438:	2b02      	cmp	r3, #2
 801343a:	d901      	bls.n	8013440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 801343c:	2303      	movs	r3, #3
 801343e:	e037      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013440:	4b1d      	ldr	r3, [pc, #116]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013448:	2b00      	cmp	r3, #0
 801344a:	d0f0      	beq.n	801342e <HAL_RCC_OscConfig+0x46a>
 801344c:	e02f      	b.n	80134ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801344e:	4b1c      	ldr	r3, [pc, #112]	; (80134c0 <HAL_RCC_OscConfig+0x4fc>)
 8013450:	2200      	movs	r2, #0
 8013452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013454:	f7fe fe0a 	bl	801206c <HAL_GetTick>
 8013458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801345a:	e008      	b.n	801346e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801345c:	f7fe fe06 	bl	801206c <HAL_GetTick>
 8013460:	4602      	mov	r2, r0
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	1ad3      	subs	r3, r2, r3
 8013466:	2b02      	cmp	r3, #2
 8013468:	d901      	bls.n	801346e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 801346a:	2303      	movs	r3, #3
 801346c:	e020      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801346e:	4b12      	ldr	r3, [pc, #72]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1f0      	bne.n	801345c <HAL_RCC_OscConfig+0x498>
 801347a:	e018      	b.n	80134ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	69db      	ldr	r3, [r3, #28]
 8013480:	2b01      	cmp	r3, #1
 8013482:	d101      	bne.n	8013488 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8013484:	2301      	movs	r3, #1
 8013486:	e013      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8013488:	4b0b      	ldr	r3, [pc, #44]	; (80134b8 <HAL_RCC_OscConfig+0x4f4>)
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6a1b      	ldr	r3, [r3, #32]
 8013498:	429a      	cmp	r2, r3
 801349a:	d106      	bne.n	80134aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d001      	beq.n	80134ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80134aa:	2301      	movs	r3, #1
 80134ac:	e000      	b.n	80134b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80134ae:	2300      	movs	r3, #0
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3718      	adds	r7, #24
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	40021000 	.word	0x40021000
 80134bc:	40007000 	.word	0x40007000
 80134c0:	42420060 	.word	0x42420060

080134c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e0d0      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80134d8:	4b6a      	ldr	r3, [pc, #424]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f003 0307 	and.w	r3, r3, #7
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d910      	bls.n	8013508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80134e6:	4b67      	ldr	r3, [pc, #412]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f023 0207 	bic.w	r2, r3, #7
 80134ee:	4965      	ldr	r1, [pc, #404]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	4313      	orrs	r3, r2
 80134f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80134f6:	4b63      	ldr	r3, [pc, #396]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f003 0307 	and.w	r3, r3, #7
 80134fe:	683a      	ldr	r2, [r7, #0]
 8013500:	429a      	cmp	r2, r3
 8013502:	d001      	beq.n	8013508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8013504:	2301      	movs	r3, #1
 8013506:	e0b8      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f003 0302 	and.w	r3, r3, #2
 8013510:	2b00      	cmp	r3, #0
 8013512:	d020      	beq.n	8013556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f003 0304 	and.w	r3, r3, #4
 801351c:	2b00      	cmp	r3, #0
 801351e:	d005      	beq.n	801352c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013520:	4b59      	ldr	r3, [pc, #356]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	4a58      	ldr	r2, [pc, #352]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801352a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f003 0308 	and.w	r3, r3, #8
 8013534:	2b00      	cmp	r3, #0
 8013536:	d005      	beq.n	8013544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013538:	4b53      	ldr	r3, [pc, #332]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	4a52      	ldr	r2, [pc, #328]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801353e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8013542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013544:	4b50      	ldr	r3, [pc, #320]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	494d      	ldr	r1, [pc, #308]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013552:	4313      	orrs	r3, r2
 8013554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	d040      	beq.n	80135e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d107      	bne.n	801357a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801356a:	4b47      	ldr	r3, [pc, #284]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013572:	2b00      	cmp	r3, #0
 8013574:	d115      	bne.n	80135a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013576:	2301      	movs	r3, #1
 8013578:	e07f      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	2b02      	cmp	r3, #2
 8013580:	d107      	bne.n	8013592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013582:	4b41      	ldr	r3, [pc, #260]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801358a:	2b00      	cmp	r3, #0
 801358c:	d109      	bne.n	80135a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801358e:	2301      	movs	r3, #1
 8013590:	e073      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013592:	4b3d      	ldr	r3, [pc, #244]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f003 0302 	and.w	r3, r3, #2
 801359a:	2b00      	cmp	r3, #0
 801359c:	d101      	bne.n	80135a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801359e:	2301      	movs	r3, #1
 80135a0:	e06b      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80135a2:	4b39      	ldr	r3, [pc, #228]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	f023 0203 	bic.w	r2, r3, #3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	4936      	ldr	r1, [pc, #216]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 80135b0:	4313      	orrs	r3, r2
 80135b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80135b4:	f7fe fd5a 	bl	801206c <HAL_GetTick>
 80135b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80135ba:	e00a      	b.n	80135d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80135bc:	f7fe fd56 	bl	801206c <HAL_GetTick>
 80135c0:	4602      	mov	r2, r0
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d901      	bls.n	80135d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80135ce:	2303      	movs	r3, #3
 80135d0:	e053      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80135d2:	4b2d      	ldr	r3, [pc, #180]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	f003 020c 	and.w	r2, r3, #12
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d1eb      	bne.n	80135bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80135e4:	4b27      	ldr	r3, [pc, #156]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f003 0307 	and.w	r3, r3, #7
 80135ec:	683a      	ldr	r2, [r7, #0]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d210      	bcs.n	8013614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80135f2:	4b24      	ldr	r3, [pc, #144]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f023 0207 	bic.w	r2, r3, #7
 80135fa:	4922      	ldr	r1, [pc, #136]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	4313      	orrs	r3, r2
 8013600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013602:	4b20      	ldr	r3, [pc, #128]	; (8013684 <HAL_RCC_ClockConfig+0x1c0>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	f003 0307 	and.w	r3, r3, #7
 801360a:	683a      	ldr	r2, [r7, #0]
 801360c:	429a      	cmp	r2, r3
 801360e:	d001      	beq.n	8013614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8013610:	2301      	movs	r3, #1
 8013612:	e032      	b.n	801367a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f003 0304 	and.w	r3, r3, #4
 801361c:	2b00      	cmp	r3, #0
 801361e:	d008      	beq.n	8013632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013620:	4b19      	ldr	r3, [pc, #100]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	4916      	ldr	r1, [pc, #88]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801362e:	4313      	orrs	r3, r2
 8013630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f003 0308 	and.w	r3, r3, #8
 801363a:	2b00      	cmp	r3, #0
 801363c:	d009      	beq.n	8013652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801363e:	4b12      	ldr	r3, [pc, #72]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	691b      	ldr	r3, [r3, #16]
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	490e      	ldr	r1, [pc, #56]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801364e:	4313      	orrs	r3, r2
 8013650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013652:	f000 f821 	bl	8013698 <HAL_RCC_GetSysClockFreq>
 8013656:	4602      	mov	r2, r0
 8013658:	4b0b      	ldr	r3, [pc, #44]	; (8013688 <HAL_RCC_ClockConfig+0x1c4>)
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	091b      	lsrs	r3, r3, #4
 801365e:	f003 030f 	and.w	r3, r3, #15
 8013662:	490a      	ldr	r1, [pc, #40]	; (801368c <HAL_RCC_ClockConfig+0x1c8>)
 8013664:	5ccb      	ldrb	r3, [r1, r3]
 8013666:	fa22 f303 	lsr.w	r3, r2, r3
 801366a:	4a09      	ldr	r2, [pc, #36]	; (8013690 <HAL_RCC_ClockConfig+0x1cc>)
 801366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801366e:	4b09      	ldr	r3, [pc, #36]	; (8013694 <HAL_RCC_ClockConfig+0x1d0>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe fcb8 	bl	8011fe8 <HAL_InitTick>

  return HAL_OK;
 8013678:	2300      	movs	r3, #0
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	40022000 	.word	0x40022000
 8013688:	40021000 	.word	0x40021000
 801368c:	0801460c 	.word	0x0801460c
 8013690:	20000000 	.word	0x20000000
 8013694:	20000004 	.word	0x20000004

08013698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013698:	b490      	push	{r4, r7}
 801369a:	b08a      	sub	sp, #40	; 0x28
 801369c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 801369e:	4b2a      	ldr	r3, [pc, #168]	; (8013748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80136a0:	1d3c      	adds	r4, r7, #4
 80136a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80136a8:	f240 2301 	movw	r3, #513	; 0x201
 80136ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80136ae:	2300      	movs	r3, #0
 80136b0:	61fb      	str	r3, [r7, #28]
 80136b2:	2300      	movs	r3, #0
 80136b4:	61bb      	str	r3, [r7, #24]
 80136b6:	2300      	movs	r3, #0
 80136b8:	627b      	str	r3, [r7, #36]	; 0x24
 80136ba:	2300      	movs	r3, #0
 80136bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80136be:	2300      	movs	r3, #0
 80136c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80136c2:	4b22      	ldr	r3, [pc, #136]	; (801374c <HAL_RCC_GetSysClockFreq+0xb4>)
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80136c8:	69fb      	ldr	r3, [r7, #28]
 80136ca:	f003 030c 	and.w	r3, r3, #12
 80136ce:	2b04      	cmp	r3, #4
 80136d0:	d002      	beq.n	80136d8 <HAL_RCC_GetSysClockFreq+0x40>
 80136d2:	2b08      	cmp	r3, #8
 80136d4:	d003      	beq.n	80136de <HAL_RCC_GetSysClockFreq+0x46>
 80136d6:	e02d      	b.n	8013734 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80136d8:	4b1d      	ldr	r3, [pc, #116]	; (8013750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80136da:	623b      	str	r3, [r7, #32]
      break;
 80136dc:	e02d      	b.n	801373a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	0c9b      	lsrs	r3, r3, #18
 80136e2:	f003 030f 	and.w	r3, r3, #15
 80136e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80136ea:	4413      	add	r3, r2
 80136ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80136f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80136f2:	69fb      	ldr	r3, [r7, #28]
 80136f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d013      	beq.n	8013724 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80136fc:	4b13      	ldr	r3, [pc, #76]	; (801374c <HAL_RCC_GetSysClockFreq+0xb4>)
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	0c5b      	lsrs	r3, r3, #17
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801370a:	4413      	add	r3, r2
 801370c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8013710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	4a0e      	ldr	r2, [pc, #56]	; (8013750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013716:	fb02 f203 	mul.w	r2, r2, r3
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013720:	627b      	str	r3, [r7, #36]	; 0x24
 8013722:	e004      	b.n	801372e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	4a0b      	ldr	r2, [pc, #44]	; (8013754 <HAL_RCC_GetSysClockFreq+0xbc>)
 8013728:	fb02 f303 	mul.w	r3, r2, r3
 801372c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 801372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013730:	623b      	str	r3, [r7, #32]
      break;
 8013732:	e002      	b.n	801373a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8013734:	4b06      	ldr	r3, [pc, #24]	; (8013750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8013736:	623b      	str	r3, [r7, #32]
      break;
 8013738:	bf00      	nop
    }
  }
  return sysclockfreq;
 801373a:	6a3b      	ldr	r3, [r7, #32]
}
 801373c:	4618      	mov	r0, r3
 801373e:	3728      	adds	r7, #40	; 0x28
 8013740:	46bd      	mov	sp, r7
 8013742:	bc90      	pop	{r4, r7}
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	080145fc 	.word	0x080145fc
 801374c:	40021000 	.word	0x40021000
 8013750:	007a1200 	.word	0x007a1200
 8013754:	003d0900 	.word	0x003d0900

08013758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013758:	b480      	push	{r7}
 801375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801375c:	4b02      	ldr	r3, [pc, #8]	; (8013768 <HAL_RCC_GetHCLKFreq+0x10>)
 801375e:	681b      	ldr	r3, [r3, #0]
}
 8013760:	4618      	mov	r0, r3
 8013762:	46bd      	mov	sp, r7
 8013764:	bc80      	pop	{r7}
 8013766:	4770      	bx	lr
 8013768:	20000000 	.word	0x20000000

0801376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013770:	f7ff fff2 	bl	8013758 <HAL_RCC_GetHCLKFreq>
 8013774:	4602      	mov	r2, r0
 8013776:	4b05      	ldr	r3, [pc, #20]	; (801378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	0a1b      	lsrs	r3, r3, #8
 801377c:	f003 0307 	and.w	r3, r3, #7
 8013780:	4903      	ldr	r1, [pc, #12]	; (8013790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013782:	5ccb      	ldrb	r3, [r1, r3]
 8013784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013788:	4618      	mov	r0, r3
 801378a:	bd80      	pop	{r7, pc}
 801378c:	40021000 	.word	0x40021000
 8013790:	0801461c 	.word	0x0801461c

08013794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8013798:	f7ff ffde 	bl	8013758 <HAL_RCC_GetHCLKFreq>
 801379c:	4602      	mov	r2, r0
 801379e:	4b05      	ldr	r3, [pc, #20]	; (80137b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	0adb      	lsrs	r3, r3, #11
 80137a4:	f003 0307 	and.w	r3, r3, #7
 80137a8:	4903      	ldr	r1, [pc, #12]	; (80137b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80137aa:	5ccb      	ldrb	r3, [r1, r3]
 80137ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	40021000 	.word	0x40021000
 80137b8:	0801461c 	.word	0x0801461c

080137bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80137c4:	4b0a      	ldr	r3, [pc, #40]	; (80137f0 <RCC_Delay+0x34>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4a0a      	ldr	r2, [pc, #40]	; (80137f4 <RCC_Delay+0x38>)
 80137ca:	fba2 2303 	umull	r2, r3, r2, r3
 80137ce:	0a5b      	lsrs	r3, r3, #9
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	fb02 f303 	mul.w	r3, r2, r3
 80137d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80137d8:	bf00      	nop
  }
  while (Delay --);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	1e5a      	subs	r2, r3, #1
 80137de:	60fa      	str	r2, [r7, #12]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d1f9      	bne.n	80137d8 <RCC_Delay+0x1c>
}
 80137e4:	bf00      	nop
 80137e6:	bf00      	nop
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bc80      	pop	{r7}
 80137ee:	4770      	bx	lr
 80137f0:	20000000 	.word	0x20000000
 80137f4:	10624dd3 	.word	0x10624dd3

080137f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d101      	bne.n	801380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013806:	2301      	movs	r3, #1
 8013808:	e03f      	b.n	801388a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d106      	bne.n	8013824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2200      	movs	r2, #0
 801381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7fe fae6 	bl	8011df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2224      	movs	r2, #36	; 0x24
 8013828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 fd9b 	bl	8014378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	691a      	ldr	r2, [r3, #16]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	695a      	ldr	r2, [r3, #20]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68da      	ldr	r2, [r3, #12]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2200      	movs	r2, #0
 8013876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2220      	movs	r2, #32
 801387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2220      	movs	r2, #32
 8013884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013888:	2300      	movs	r3, #0
}
 801388a:	4618      	mov	r0, r3
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013892:	b580      	push	{r7, lr}
 8013894:	b08a      	sub	sp, #40	; 0x28
 8013896:	af02      	add	r7, sp, #8
 8013898:	60f8      	str	r0, [r7, #12]
 801389a:	60b9      	str	r1, [r7, #8]
 801389c:	603b      	str	r3, [r7, #0]
 801389e:	4613      	mov	r3, r2
 80138a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80138a2:	2300      	movs	r3, #0
 80138a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	2b20      	cmp	r3, #32
 80138b0:	d17c      	bne.n	80139ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d002      	beq.n	80138be <HAL_UART_Transmit+0x2c>
 80138b8:	88fb      	ldrh	r3, [r7, #6]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d101      	bne.n	80138c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80138be:	2301      	movs	r3, #1
 80138c0:	e075      	b.n	80139ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d101      	bne.n	80138d0 <HAL_UART_Transmit+0x3e>
 80138cc:	2302      	movs	r3, #2
 80138ce:	e06e      	b.n	80139ae <HAL_UART_Transmit+0x11c>
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2201      	movs	r2, #1
 80138d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2221      	movs	r2, #33	; 0x21
 80138e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80138e6:	f7fe fbc1 	bl	801206c <HAL_GetTick>
 80138ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	88fa      	ldrh	r2, [r7, #6]
 80138f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	88fa      	ldrh	r2, [r7, #6]
 80138f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	689b      	ldr	r3, [r3, #8]
 80138fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013900:	d108      	bne.n	8013914 <HAL_UART_Transmit+0x82>
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	691b      	ldr	r3, [r3, #16]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d104      	bne.n	8013914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801390a:	2300      	movs	r3, #0
 801390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	61bb      	str	r3, [r7, #24]
 8013912:	e003      	b.n	801391c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013918:	2300      	movs	r3, #0
 801391a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	2200      	movs	r2, #0
 8013920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013924:	e02a      	b.n	801397c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	2200      	movs	r2, #0
 801392e:	2180      	movs	r1, #128	; 0x80
 8013930:	68f8      	ldr	r0, [r7, #12]
 8013932:	f000 fb0d 	bl	8013f50 <UART_WaitOnFlagUntilTimeout>
 8013936:	4603      	mov	r3, r0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d001      	beq.n	8013940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801393c:	2303      	movs	r3, #3
 801393e:	e036      	b.n	80139ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d10b      	bne.n	801395e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	881b      	ldrh	r3, [r3, #0]
 801394a:	461a      	mov	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	3302      	adds	r3, #2
 801395a:	61bb      	str	r3, [r7, #24]
 801395c:	e007      	b.n	801396e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	781a      	ldrb	r2, [r3, #0]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	3301      	adds	r3, #1
 801396c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013972:	b29b      	uxth	r3, r3
 8013974:	3b01      	subs	r3, #1
 8013976:	b29a      	uxth	r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013980:	b29b      	uxth	r3, r3
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1cf      	bne.n	8013926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	9300      	str	r3, [sp, #0]
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	2200      	movs	r2, #0
 801398e:	2140      	movs	r1, #64	; 0x40
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f000 fadd 	bl	8013f50 <UART_WaitOnFlagUntilTimeout>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801399c:	2303      	movs	r3, #3
 801399e:	e006      	b.n	80139ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2220      	movs	r2, #32
 80139a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	e000      	b.n	80139ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80139ac:	2302      	movs	r3, #2
  }
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3720      	adds	r7, #32
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}

080139b6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80139b6:	b580      	push	{r7, lr}
 80139b8:	b086      	sub	sp, #24
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	60f8      	str	r0, [r7, #12]
 80139be:	60b9      	str	r1, [r7, #8]
 80139c0:	4613      	mov	r3, r2
 80139c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	2b20      	cmp	r3, #32
 80139ce:	d13c      	bne.n	8013a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d002      	beq.n	80139dc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80139d6:	88fb      	ldrh	r3, [r7, #6]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80139dc:	2301      	movs	r3, #1
 80139de:	e035      	b.n	8013a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d101      	bne.n	80139ee <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80139ea:	2302      	movs	r3, #2
 80139ec:	e02e      	b.n	8013a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2201      	movs	r2, #1
 80139f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2201      	movs	r2, #1
 80139fa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80139fc:	88fb      	ldrh	r3, [r7, #6]
 80139fe:	461a      	mov	r2, r3
 8013a00:	68b9      	ldr	r1, [r7, #8]
 8013a02:	68f8      	ldr	r0, [r7, #12]
 8013a04:	f000 faee 	bl	8013fe4 <UART_Start_Receive_DMA>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8013a0c:	7dfb      	ldrb	r3, [r7, #23]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d119      	bne.n	8013a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a16:	2b01      	cmp	r3, #1
 8013a18:	d113      	bne.n	8013a42 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	613b      	str	r3, [r7, #16]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	613b      	str	r3, [r7, #16]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	613b      	str	r3, [r7, #16]
 8013a2e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	68da      	ldr	r2, [r3, #12]
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f042 0210 	orr.w	r2, r2, #16
 8013a3e:	60da      	str	r2, [r3, #12]
 8013a40:	e001      	b.n	8013a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8013a42:	2301      	movs	r3, #1
 8013a44:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8013a46:	7dfb      	ldrb	r3, [r7, #23]
 8013a48:	e000      	b.n	8013a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8013a4a:	2302      	movs	r3, #2
  }
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3718      	adds	r7, #24
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08a      	sub	sp, #40	; 0x28
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	695b      	ldr	r3, [r3, #20]
 8013a72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8013a74:	2300      	movs	r3, #0
 8013a76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7e:	f003 030f 	and.w	r3, r3, #15
 8013a82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d10d      	bne.n	8013aa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	f003 0320 	and.w	r3, r3, #32
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d008      	beq.n	8013aa6 <HAL_UART_IRQHandler+0x52>
 8013a94:	6a3b      	ldr	r3, [r7, #32]
 8013a96:	f003 0320 	and.w	r3, r3, #32
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d003      	beq.n	8013aa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 fbc0 	bl	8014224 <UART_Receive_IT>
      return;
 8013aa4:	e17b      	b.n	8013d9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f000 80b1 	beq.w	8013c10 <HAL_UART_IRQHandler+0x1bc>
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <HAL_UART_IRQHandler+0x70>
 8013ab8:	6a3b      	ldr	r3, [r7, #32]
 8013aba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f000 80a6 	beq.w	8013c10 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00a      	beq.n	8013ae4 <HAL_UART_IRQHandler+0x90>
 8013ace:	6a3b      	ldr	r3, [r7, #32]
 8013ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d005      	beq.n	8013ae4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013adc:	f043 0201 	orr.w	r2, r3, #1
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	f003 0304 	and.w	r3, r3, #4
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00a      	beq.n	8013b04 <HAL_UART_IRQHandler+0xb0>
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	f003 0301 	and.w	r3, r3, #1
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d005      	beq.n	8013b04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013afc:	f043 0202 	orr.w	r2, r3, #2
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	f003 0302 	and.w	r3, r3, #2
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d00a      	beq.n	8013b24 <HAL_UART_IRQHandler+0xd0>
 8013b0e:	69fb      	ldr	r3, [r7, #28]
 8013b10:	f003 0301 	and.w	r3, r3, #1
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d005      	beq.n	8013b24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b1c:	f043 0204 	orr.w	r2, r3, #4
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8013b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b26:	f003 0308 	and.w	r3, r3, #8
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00f      	beq.n	8013b4e <HAL_UART_IRQHandler+0xfa>
 8013b2e:	6a3b      	ldr	r3, [r7, #32]
 8013b30:	f003 0320 	and.w	r3, r3, #32
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d104      	bne.n	8013b42 <HAL_UART_IRQHandler+0xee>
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	f003 0301 	and.w	r3, r3, #1
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d005      	beq.n	8013b4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b46:	f043 0208 	orr.w	r2, r3, #8
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f000 811e 	beq.w	8013d94 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5a:	f003 0320 	and.w	r3, r3, #32
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d007      	beq.n	8013b72 <HAL_UART_IRQHandler+0x11e>
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	f003 0320 	and.w	r3, r3, #32
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d002      	beq.n	8013b72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 fb59 	bl	8014224 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	695b      	ldr	r3, [r3, #20]
 8013b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	bf14      	ite	ne
 8013b80:	2301      	movne	r3, #1
 8013b82:	2300      	moveq	r3, #0
 8013b84:	b2db      	uxtb	r3, r3
 8013b86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b8c:	f003 0308 	and.w	r3, r3, #8
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d102      	bne.n	8013b9a <HAL_UART_IRQHandler+0x146>
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d031      	beq.n	8013bfe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 fa9b 	bl	80140d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	695b      	ldr	r3, [r3, #20]
 8013ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d023      	beq.n	8013bf6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	695a      	ldr	r2, [r3, #20]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013bbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d013      	beq.n	8013bee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bca:	4a76      	ldr	r2, [pc, #472]	; (8013da4 <HAL_UART_IRQHandler+0x350>)
 8013bcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fe fcbe 	bl	8012554 <HAL_DMA_Abort_IT>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d016      	beq.n	8013c0c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013be8:	4610      	mov	r0, r2
 8013bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013bec:	e00e      	b.n	8013c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 f8f5 	bl	8013dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013bf4:	e00a      	b.n	8013c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 f8f1 	bl	8013dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013bfc:	e006      	b.n	8013c0c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 f8ed 	bl	8013dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2200      	movs	r2, #0
 8013c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8013c0a:	e0c3      	b.n	8013d94 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c0c:	bf00      	nop
    return;
 8013c0e:	e0c1      	b.n	8013d94 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	f040 80a1 	bne.w	8013d5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	f003 0310 	and.w	r3, r3, #16
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 809b 	beq.w	8013d5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8013c26:	6a3b      	ldr	r3, [r7, #32]
 8013c28:	f003 0310 	and.w	r3, r3, #16
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f000 8095 	beq.w	8013d5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013c32:	2300      	movs	r3, #0
 8013c34:	60fb      	str	r3, [r7, #12]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	60fb      	str	r3, [r7, #12]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	60fb      	str	r3, [r7, #12]
 8013c46:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	695b      	ldr	r3, [r3, #20]
 8013c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d04e      	beq.n	8013cf4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8013c60:	8a3b      	ldrh	r3, [r7, #16]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f000 8098 	beq.w	8013d98 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013c6c:	8a3a      	ldrh	r2, [r7, #16]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	f080 8092 	bcs.w	8013d98 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	8a3a      	ldrh	r2, [r7, #16]
 8013c78:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c7e:	699b      	ldr	r3, [r3, #24]
 8013c80:	2b20      	cmp	r3, #32
 8013c82:	d02b      	beq.n	8013cdc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	68da      	ldr	r2, [r3, #12]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013c92:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	695a      	ldr	r2, [r3, #20]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f022 0201 	bic.w	r2, r2, #1
 8013ca2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	695a      	ldr	r2, [r3, #20]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013cb2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2220      	movs	r2, #32
 8013cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68da      	ldr	r2, [r3, #12]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f022 0210 	bic.w	r2, r2, #16
 8013cd0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7fe fc01 	bl	80124de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	4619      	mov	r1, r3
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7fd fe2d 	bl	801194c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8013cf2:	e051      	b.n	8013d98 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d047      	beq.n	8013d9c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8013d0c:	8a7b      	ldrh	r3, [r7, #18]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d044      	beq.n	8013d9c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	68da      	ldr	r2, [r3, #12]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013d20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	695a      	ldr	r2, [r3, #20]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f022 0201 	bic.w	r2, r2, #1
 8013d30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2220      	movs	r2, #32
 8013d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68da      	ldr	r2, [r3, #12]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f022 0210 	bic.w	r2, r2, #16
 8013d4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013d50:	8a7b      	ldrh	r3, [r7, #18]
 8013d52:	4619      	mov	r1, r3
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7fd fdf9 	bl	801194c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8013d5a:	e01f      	b.n	8013d9c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d008      	beq.n	8013d78 <HAL_UART_IRQHandler+0x324>
 8013d66:	6a3b      	ldr	r3, [r7, #32]
 8013d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d003      	beq.n	8013d78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 f9f0 	bl	8014156 <UART_Transmit_IT>
    return;
 8013d76:	e012      	b.n	8013d9e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00d      	beq.n	8013d9e <HAL_UART_IRQHandler+0x34a>
 8013d82:	6a3b      	ldr	r3, [r7, #32]
 8013d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d008      	beq.n	8013d9e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 fa31 	bl	80141f4 <UART_EndTransmit_IT>
    return;
 8013d92:	e004      	b.n	8013d9e <HAL_UART_IRQHandler+0x34a>
    return;
 8013d94:	bf00      	nop
 8013d96:	e002      	b.n	8013d9e <HAL_UART_IRQHandler+0x34a>
      return;
 8013d98:	bf00      	nop
 8013d9a:	e000      	b.n	8013d9e <HAL_UART_IRQHandler+0x34a>
      return;
 8013d9c:	bf00      	nop
  }
}
 8013d9e:	3728      	adds	r7, #40	; 0x28
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	0801412f 	.word	0x0801412f

08013da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013db0:	bf00      	nop
 8013db2:	370c      	adds	r7, #12
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bc80      	pop	{r7}
 8013db8:	4770      	bx	lr

08013dba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013dba:	b480      	push	{r7}
 8013dbc:	b083      	sub	sp, #12
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8013dc2:	bf00      	nop
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bc80      	pop	{r7}
 8013dca:	4770      	bx	lr

08013dcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8013dd4:	bf00      	nop
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bc80      	pop	{r7}
 8013ddc:	4770      	bx	lr

08013dde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013dde:	b480      	push	{r7}
 8013de0:	b083      	sub	sp, #12
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013de6:	bf00      	nop
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bc80      	pop	{r7}
 8013dee:	4770      	bx	lr

08013df0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b084      	sub	sp, #16
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f003 0320 	and.w	r3, r3, #32
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d12a      	bne.n	8013e62 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	68da      	ldr	r2, [r3, #12]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013e20:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	695a      	ldr	r2, [r3, #20]
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f022 0201 	bic.w	r2, r2, #1
 8013e30:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	695a      	ldr	r2, [r3, #20]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013e40:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2220      	movs	r2, #32
 8013e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e4e:	2b01      	cmp	r3, #1
 8013e50:	d107      	bne.n	8013e62 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68da      	ldr	r2, [r3, #12]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f022 0210 	bic.w	r2, r2, #16
 8013e60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d106      	bne.n	8013e78 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013e6e:	4619      	mov	r1, r3
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f7fd fd6b 	bl	801194c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013e76:	e002      	b.n	8013e7e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f7ff ff9e 	bl	8013dba <HAL_UART_RxCpltCallback>
}
 8013e7e:	bf00      	nop
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b084      	sub	sp, #16
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d108      	bne.n	8013eae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013ea0:	085b      	lsrs	r3, r3, #1
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	68f8      	ldr	r0, [r7, #12]
 8013ea8:	f7fd fd50 	bl	801194c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013eac:	e002      	b.n	8013eb4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f7ff ff8c 	bl	8013dcc <HAL_UART_RxHalfCpltCallback>
}
 8013eb4:	bf00      	nop
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ecc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	695b      	ldr	r3, [r3, #20]
 8013ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	bf14      	ite	ne
 8013edc:	2301      	movne	r3, #1
 8013ede:	2300      	moveq	r3, #0
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b21      	cmp	r3, #33	; 0x21
 8013eee:	d108      	bne.n	8013f02 <UART_DMAError+0x46>
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d005      	beq.n	8013f02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013efc:	68b8      	ldr	r0, [r7, #8]
 8013efe:	f000 f8d5 	bl	80140ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	695b      	ldr	r3, [r3, #20]
 8013f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	bf14      	ite	ne
 8013f10:	2301      	movne	r3, #1
 8013f12:	2300      	moveq	r3, #0
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b22      	cmp	r3, #34	; 0x22
 8013f22:	d108      	bne.n	8013f36 <UART_DMAError+0x7a>
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d005      	beq.n	8013f36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013f30:	68b8      	ldr	r0, [r7, #8]
 8013f32:	f000 f8d0 	bl	80140d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3a:	f043 0210 	orr.w	r2, r3, #16
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f42:	68b8      	ldr	r0, [r7, #8]
 8013f44:	f7ff ff4b 	bl	8013dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f48:	bf00      	nop
 8013f4a:	3710      	adds	r7, #16
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	603b      	str	r3, [r7, #0]
 8013f5c:	4613      	mov	r3, r2
 8013f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f60:	e02c      	b.n	8013fbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f68:	d028      	beq.n	8013fbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d007      	beq.n	8013f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8013f70:	f7fe f87c 	bl	801206c <HAL_GetTick>
 8013f74:	4602      	mov	r2, r0
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	69ba      	ldr	r2, [r7, #24]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d21d      	bcs.n	8013fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	68da      	ldr	r2, [r3, #12]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	695a      	ldr	r2, [r3, #20]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	f022 0201 	bic.w	r2, r2, #1
 8013f9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2220      	movs	r2, #32
 8013fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2220      	movs	r2, #32
 8013fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	e00f      	b.n	8013fdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	68ba      	ldr	r2, [r7, #8]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	bf0c      	ite	eq
 8013fcc:	2301      	moveq	r3, #1
 8013fce:	2300      	movne	r3, #0
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d0c3      	beq.n	8013f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013fda:	2300      	movs	r3, #0
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	88fa      	ldrh	r2, [r7, #6]
 8013ffc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2200      	movs	r2, #0
 8014002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2222      	movs	r2, #34	; 0x22
 8014008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014010:	4a23      	ldr	r2, [pc, #140]	; (80140a0 <UART_Start_Receive_DMA+0xbc>)
 8014012:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014018:	4a22      	ldr	r2, [pc, #136]	; (80140a4 <UART_Start_Receive_DMA+0xc0>)
 801401a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014020:	4a21      	ldr	r2, [pc, #132]	; (80140a8 <UART_Start_Receive_DMA+0xc4>)
 8014022:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014028:	2200      	movs	r2, #0
 801402a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801402c:	f107 0308 	add.w	r3, r7, #8
 8014030:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	3304      	adds	r3, #4
 801403c:	4619      	mov	r1, r3
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	88fb      	ldrh	r3, [r7, #6]
 8014044:	f7fe f9ec 	bl	8012420 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8014048:	2300      	movs	r3, #0
 801404a:	613b      	str	r3, [r7, #16]
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	613b      	str	r3, [r7, #16]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	613b      	str	r3, [r7, #16]
 801405c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2200      	movs	r2, #0
 8014062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	68da      	ldr	r2, [r3, #12]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014074:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	695a      	ldr	r2, [r3, #20]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f042 0201 	orr.w	r2, r2, #1
 8014084:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	695a      	ldr	r2, [r3, #20]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014094:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8014096:	2300      	movs	r3, #0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3718      	adds	r7, #24
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	08013df1 	.word	0x08013df1
 80140a4:	08013e87 	.word	0x08013e87
 80140a8:	08013ebd 	.word	0x08013ebd

080140ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	68da      	ldr	r2, [r3, #12]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80140c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2220      	movs	r2, #32
 80140c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80140cc:	bf00      	nop
 80140ce:	370c      	adds	r7, #12
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bc80      	pop	{r7}
 80140d4:	4770      	bx	lr

080140d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80140d6:	b480      	push	{r7}
 80140d8:	b083      	sub	sp, #12
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	68da      	ldr	r2, [r3, #12]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80140ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	695a      	ldr	r2, [r3, #20]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f022 0201 	bic.w	r2, r2, #1
 80140fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014102:	2b01      	cmp	r3, #1
 8014104:	d107      	bne.n	8014116 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	68da      	ldr	r2, [r3, #12]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	f022 0210 	bic.w	r2, r2, #16
 8014114:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2220      	movs	r2, #32
 801411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014124:	bf00      	nop
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	bc80      	pop	{r7}
 801412c:	4770      	bx	lr

0801412e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801412e:	b580      	push	{r7, lr}
 8014130:	b084      	sub	sp, #16
 8014132:	af00      	add	r7, sp, #0
 8014134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801413a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	2200      	movs	r2, #0
 8014140:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	2200      	movs	r2, #0
 8014146:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f7ff fe48 	bl	8013dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801414e:	bf00      	nop
 8014150:	3710      	adds	r7, #16
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8014156:	b480      	push	{r7}
 8014158:	b085      	sub	sp, #20
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014164:	b2db      	uxtb	r3, r3
 8014166:	2b21      	cmp	r3, #33	; 0x21
 8014168:	d13e      	bne.n	80141e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	689b      	ldr	r3, [r3, #8]
 801416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014172:	d114      	bne.n	801419e <UART_Transmit_IT+0x48>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	691b      	ldr	r3, [r3, #16]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d110      	bne.n	801419e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a1b      	ldr	r3, [r3, #32]
 8014180:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	461a      	mov	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014190:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a1b      	ldr	r3, [r3, #32]
 8014196:	1c9a      	adds	r2, r3, #2
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	621a      	str	r2, [r3, #32]
 801419c:	e008      	b.n	80141b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6a1b      	ldr	r3, [r3, #32]
 80141a2:	1c59      	adds	r1, r3, #1
 80141a4:	687a      	ldr	r2, [r7, #4]
 80141a6:	6211      	str	r1, [r2, #32]
 80141a8:	781a      	ldrb	r2, [r3, #0]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	3b01      	subs	r3, #1
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	4619      	mov	r1, r3
 80141be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10f      	bne.n	80141e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	68da      	ldr	r2, [r3, #12]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80141d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	68da      	ldr	r2, [r3, #12]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80141e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80141e4:	2300      	movs	r3, #0
 80141e6:	e000      	b.n	80141ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80141e8:	2302      	movs	r3, #2
  }
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3714      	adds	r7, #20
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bc80      	pop	{r7}
 80141f2:	4770      	bx	lr

080141f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	68da      	ldr	r2, [r3, #12]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801420a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2220      	movs	r2, #32
 8014210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f7ff fdc7 	bl	8013da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014232:	b2db      	uxtb	r3, r3
 8014234:	2b22      	cmp	r3, #34	; 0x22
 8014236:	f040 8099 	bne.w	801436c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014242:	d117      	bne.n	8014274 <UART_Receive_IT+0x50>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	691b      	ldr	r3, [r3, #16]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d113      	bne.n	8014274 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801424c:	2300      	movs	r3, #0
 801424e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014254:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	b29b      	uxth	r3, r3
 801425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014262:	b29a      	uxth	r2, r3
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801426c:	1c9a      	adds	r2, r3, #2
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	629a      	str	r2, [r3, #40]	; 0x28
 8014272:	e026      	b.n	80142c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014278:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 801427a:	2300      	movs	r3, #0
 801427c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014286:	d007      	beq.n	8014298 <UART_Receive_IT+0x74>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	689b      	ldr	r3, [r3, #8]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10a      	bne.n	80142a6 <UART_Receive_IT+0x82>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d106      	bne.n	80142a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	e008      	b.n	80142b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142bc:	1c5a      	adds	r2, r3, #1
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	3b01      	subs	r3, #1
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	4619      	mov	r1, r3
 80142d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d148      	bne.n	8014368 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	68da      	ldr	r2, [r3, #12]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f022 0220 	bic.w	r2, r2, #32
 80142e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	68da      	ldr	r2, [r3, #12]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80142f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	695a      	ldr	r2, [r3, #20]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	f022 0201 	bic.w	r2, r2, #1
 8014304:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2220      	movs	r2, #32
 801430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014312:	2b01      	cmp	r3, #1
 8014314:	d123      	bne.n	801435e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	68da      	ldr	r2, [r3, #12]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f022 0210 	bic.w	r2, r2, #16
 801432a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f003 0310 	and.w	r3, r3, #16
 8014336:	2b10      	cmp	r3, #16
 8014338:	d10a      	bne.n	8014350 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801433a:	2300      	movs	r3, #0
 801433c:	60fb      	str	r3, [r7, #12]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	60fb      	str	r3, [r7, #12]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	60fb      	str	r3, [r7, #12]
 801434e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014354:	4619      	mov	r1, r3
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f7fd faf8 	bl	801194c <HAL_UARTEx_RxEventCallback>
 801435c:	e002      	b.n	8014364 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f7ff fd2b 	bl	8013dba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8014364:	2300      	movs	r3, #0
 8014366:	e002      	b.n	801436e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	e000      	b.n	801436e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 801436c:	2302      	movs	r3, #2
  }
}
 801436e:	4618      	mov	r0, r3
 8014370:	3718      	adds	r7, #24
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
	...

08014378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	68da      	ldr	r2, [r3, #12]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	430a      	orrs	r2, r1
 8014394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	689a      	ldr	r2, [r3, #8]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	691b      	ldr	r3, [r3, #16]
 801439e:	431a      	orrs	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	695b      	ldr	r3, [r3, #20]
 80143a4:	4313      	orrs	r3, r2
 80143a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	68db      	ldr	r3, [r3, #12]
 80143ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80143b2:	f023 030c 	bic.w	r3, r3, #12
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	6812      	ldr	r2, [r2, #0]
 80143ba:	68b9      	ldr	r1, [r7, #8]
 80143bc:	430b      	orrs	r3, r1
 80143be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	695b      	ldr	r3, [r3, #20]
 80143c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	699a      	ldr	r2, [r3, #24]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	430a      	orrs	r2, r1
 80143d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a2c      	ldr	r2, [pc, #176]	; (801448c <UART_SetConfig+0x114>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d103      	bne.n	80143e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80143e0:	f7ff f9d8 	bl	8013794 <HAL_RCC_GetPCLK2Freq>
 80143e4:	60f8      	str	r0, [r7, #12]
 80143e6:	e002      	b.n	80143ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80143e8:	f7ff f9c0 	bl	801376c <HAL_RCC_GetPCLK1Freq>
 80143ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	4613      	mov	r3, r2
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	4413      	add	r3, r2
 80143f6:	009a      	lsls	r2, r3, #2
 80143f8:	441a      	add	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	fbb2 f3f3 	udiv	r3, r2, r3
 8014404:	4a22      	ldr	r2, [pc, #136]	; (8014490 <UART_SetConfig+0x118>)
 8014406:	fba2 2303 	umull	r2, r3, r2, r3
 801440a:	095b      	lsrs	r3, r3, #5
 801440c:	0119      	lsls	r1, r3, #4
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	4613      	mov	r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	4413      	add	r3, r2
 8014416:	009a      	lsls	r2, r3, #2
 8014418:	441a      	add	r2, r3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	fbb2 f2f3 	udiv	r2, r2, r3
 8014424:	4b1a      	ldr	r3, [pc, #104]	; (8014490 <UART_SetConfig+0x118>)
 8014426:	fba3 0302 	umull	r0, r3, r3, r2
 801442a:	095b      	lsrs	r3, r3, #5
 801442c:	2064      	movs	r0, #100	; 0x64
 801442e:	fb00 f303 	mul.w	r3, r0, r3
 8014432:	1ad3      	subs	r3, r2, r3
 8014434:	011b      	lsls	r3, r3, #4
 8014436:	3332      	adds	r3, #50	; 0x32
 8014438:	4a15      	ldr	r2, [pc, #84]	; (8014490 <UART_SetConfig+0x118>)
 801443a:	fba2 2303 	umull	r2, r3, r2, r3
 801443e:	095b      	lsrs	r3, r3, #5
 8014440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014444:	4419      	add	r1, r3
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	4613      	mov	r3, r2
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	4413      	add	r3, r2
 801444e:	009a      	lsls	r2, r3, #2
 8014450:	441a      	add	r2, r3
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	fbb2 f2f3 	udiv	r2, r2, r3
 801445c:	4b0c      	ldr	r3, [pc, #48]	; (8014490 <UART_SetConfig+0x118>)
 801445e:	fba3 0302 	umull	r0, r3, r3, r2
 8014462:	095b      	lsrs	r3, r3, #5
 8014464:	2064      	movs	r0, #100	; 0x64
 8014466:	fb00 f303 	mul.w	r3, r0, r3
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	011b      	lsls	r3, r3, #4
 801446e:	3332      	adds	r3, #50	; 0x32
 8014470:	4a07      	ldr	r2, [pc, #28]	; (8014490 <UART_SetConfig+0x118>)
 8014472:	fba2 2303 	umull	r2, r3, r2, r3
 8014476:	095b      	lsrs	r3, r3, #5
 8014478:	f003 020f 	and.w	r2, r3, #15
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	440a      	add	r2, r1
 8014482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8014484:	bf00      	nop
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	40013800 	.word	0x40013800
 8014490:	51eb851f 	.word	0x51eb851f

08014494 <__libc_init_array>:
 8014494:	b570      	push	{r4, r5, r6, lr}
 8014496:	2600      	movs	r6, #0
 8014498:	4d0c      	ldr	r5, [pc, #48]	; (80144cc <__libc_init_array+0x38>)
 801449a:	4c0d      	ldr	r4, [pc, #52]	; (80144d0 <__libc_init_array+0x3c>)
 801449c:	1b64      	subs	r4, r4, r5
 801449e:	10a4      	asrs	r4, r4, #2
 80144a0:	42a6      	cmp	r6, r4
 80144a2:	d109      	bne.n	80144b8 <__libc_init_array+0x24>
 80144a4:	f000 f830 	bl	8014508 <_init>
 80144a8:	2600      	movs	r6, #0
 80144aa:	4d0a      	ldr	r5, [pc, #40]	; (80144d4 <__libc_init_array+0x40>)
 80144ac:	4c0a      	ldr	r4, [pc, #40]	; (80144d8 <__libc_init_array+0x44>)
 80144ae:	1b64      	subs	r4, r4, r5
 80144b0:	10a4      	asrs	r4, r4, #2
 80144b2:	42a6      	cmp	r6, r4
 80144b4:	d105      	bne.n	80144c2 <__libc_init_array+0x2e>
 80144b6:	bd70      	pop	{r4, r5, r6, pc}
 80144b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80144bc:	4798      	blx	r3
 80144be:	3601      	adds	r6, #1
 80144c0:	e7ee      	b.n	80144a0 <__libc_init_array+0xc>
 80144c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80144c6:	4798      	blx	r3
 80144c8:	3601      	adds	r6, #1
 80144ca:	e7f2      	b.n	80144b2 <__libc_init_array+0x1e>
 80144cc:	08014624 	.word	0x08014624
 80144d0:	08014624 	.word	0x08014624
 80144d4:	08014624 	.word	0x08014624
 80144d8:	08014628 	.word	0x08014628

080144dc <memcpy>:
 80144dc:	440a      	add	r2, r1
 80144de:	4291      	cmp	r1, r2
 80144e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80144e4:	d100      	bne.n	80144e8 <memcpy+0xc>
 80144e6:	4770      	bx	lr
 80144e8:	b510      	push	{r4, lr}
 80144ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144ee:	4291      	cmp	r1, r2
 80144f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80144f4:	d1f9      	bne.n	80144ea <memcpy+0xe>
 80144f6:	bd10      	pop	{r4, pc}

080144f8 <memset>:
 80144f8:	4603      	mov	r3, r0
 80144fa:	4402      	add	r2, r0
 80144fc:	4293      	cmp	r3, r2
 80144fe:	d100      	bne.n	8014502 <memset+0xa>
 8014500:	4770      	bx	lr
 8014502:	f803 1b01 	strb.w	r1, [r3], #1
 8014506:	e7f9      	b.n	80144fc <memset+0x4>

08014508 <_init>:
 8014508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450a:	bf00      	nop
 801450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801450e:	bc08      	pop	{r3}
 8014510:	469e      	mov	lr, r3
 8014512:	4770      	bx	lr

08014514 <_fini>:
 8014514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014516:	bf00      	nop
 8014518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801451a:	bc08      	pop	{r3}
 801451c:	469e      	mov	lr, r3
 801451e:	4770      	bx	lr
