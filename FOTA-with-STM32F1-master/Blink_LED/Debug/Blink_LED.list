
Blink_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002284  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007390  08007390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007428  08007428  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007428  08007428  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007428  08007428  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007428  08007428  00007428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800742c  0800742c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007430  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  0800743c  00010010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800743c  000100a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000765a  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d1  00000000  00000000  0001768f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  00019060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  000197d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169a4  00000000  00000000  00019e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081dd  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081441  00000000  00000000  00038a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9e4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cec  00000000  00000000  000b9ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000010 	.word	0x20000010
 8005128:	00000000 	.word	0x00000000
 800512c:	08007378 	.word	0x08007378

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000014 	.word	0x20000014
 8005148:	08007378 	.word	0x08007378

0800514c <strcmp>:
 800514c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005154:	2a01      	cmp	r2, #1
 8005156:	bf28      	it	cs
 8005158:	429a      	cmpcs	r2, r3
 800515a:	d0f7      	beq.n	800514c <strcmp>
 800515c:	1ad0      	subs	r0, r2, r3
 800515e:	4770      	bx	lr

08005160 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t statusData[5];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b08e      	sub	sp, #56	; 0x38
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <HAL_UART_RxCpltCallback+0x90>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d139      	bne.n	80051e6 <HAL_UART_RxCpltCallback+0x86>
	{
		if(strcmp((char *)statusData, "FOTA") == 0)
 8005172:	4920      	ldr	r1, [pc, #128]	; (80051f4 <HAL_UART_RxCpltCallback+0x94>)
 8005174:	4820      	ldr	r0, [pc, #128]	; (80051f8 <HAL_UART_RxCpltCallback+0x98>)
 8005176:	f7ff ffe9 	bl	800514c <strcmp>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11d      	bne.n	80051bc <HAL_UART_RxCpltCallback+0x5c>
		{
			uint8_t ReplyStr[] = "\r\nStarting FOTA\r\n";
 8005180:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <HAL_UART_RxCpltCallback+0x9c>)
 8005182:	f107 0420 	add.w	r4, r7, #32
 8005186:	461d      	mov	r5, r3
 8005188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800518a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	8023      	strh	r3, [r4, #0]
			uint32_t bootControl_adr= 0x0801FC00;
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_UART_RxCpltCallback+0xa0>)
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
			uint32_t bootState = 0x01ul;
 8005194:	2301      	movs	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]

			HAL_UART_Transmit(&huart1, ReplyStr, sizeof(ReplyStr), HAL_MAX_DELAY);
 8005198:	f107 0120 	add.w	r1, r7, #32
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	2212      	movs	r2, #18
 80051a2:	4818      	ldr	r0, [pc, #96]	; (8005204 <HAL_UART_RxCpltCallback+0xa4>)
 80051a4:	f001 fcd3 	bl	8006b4e <HAL_UART_Transmit>
			Flash_Write_Data(bootControl_adr, &bootState, 1);
 80051a8:	f107 031c 	add.w	r3, r7, #28
 80051ac:	2201      	movs	r2, #1
 80051ae:	4619      	mov	r1, r3
 80051b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051b2:	f000 f93d 	bl	8005430 <Flash_Write_Data>

			HAL_NVIC_SystemReset();
 80051b6:	f000 fc1c 	bl	80059f2 <HAL_NVIC_SystemReset>
			uint8_t tempStr[] = "\r\nUnknown command\r\n";
			HAL_UART_Transmit(&huart1, tempStr, sizeof(tempStr), HAL_MAX_DELAY);
			HAL_UART_Receive_IT(&huart1, statusData, 4);
		}
	}
}
 80051ba:	e014      	b.n	80051e6 <HAL_UART_RxCpltCallback+0x86>
			uint8_t tempStr[] = "\r\nUnknown command\r\n";
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_UART_RxCpltCallback+0xa8>)
 80051be:	f107 0408 	add.w	r4, r7, #8
 80051c2:	461d      	mov	r5, r3
 80051c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, tempStr, sizeof(tempStr), HAL_MAX_DELAY);
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295
 80051d4:	2214      	movs	r2, #20
 80051d6:	480b      	ldr	r0, [pc, #44]	; (8005204 <HAL_UART_RxCpltCallback+0xa4>)
 80051d8:	f001 fcb9 	bl	8006b4e <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart1, statusData, 4);
 80051dc:	2204      	movs	r2, #4
 80051de:	4906      	ldr	r1, [pc, #24]	; (80051f8 <HAL_UART_RxCpltCallback+0x98>)
 80051e0:	4808      	ldr	r0, [pc, #32]	; (8005204 <HAL_UART_RxCpltCallback+0xa4>)
 80051e2:	f001 fd46 	bl	8006c72 <HAL_UART_Receive_IT>
}
 80051e6:	bf00      	nop
 80051e8:	3738      	adds	r7, #56	; 0x38
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bdb0      	pop	{r4, r5, r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40013800 	.word	0x40013800
 80051f4:	08007390 	.word	0x08007390
 80051f8:	2000007c 	.word	0x2000007c
 80051fc:	08007398 	.word	0x08007398
 8005200:	0801fc00 	.word	0x0801fc00
 8005204:	2000003c 	.word	0x2000003c
 8005208:	080073ac 	.word	0x080073ac

0800520c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800520c:	b5b0      	push	{r4, r5, r7, lr}
 800520e:	b090      	sub	sp, #64	; 0x40
 8005210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)0x08005000;
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <main+0x60>)
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <main+0x64>)
 8005216:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005218:	f000 fa4e 	bl	80056b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800521c:	f000 f832 	bl	8005284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005220:	f000 f8a0 	bl	8005364 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005224:	f000 f874 	bl	8005310 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t startStr[] = "If you want to update firmware, please send command:\"FOTA\"\r\n";
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <main+0x68>)
 800522a:	463c      	mov	r4, r7
 800522c:	461d      	mov	r5, r3
 800522e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800523a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800523e:	c407      	stmia	r4!, {r0, r1, r2}
 8005240:	7023      	strb	r3, [r4, #0]

  HAL_UART_Transmit(&huart1, startStr, sizeof(startStr), HAL_MAX_DELAY);
 8005242:	4639      	mov	r1, r7
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	223d      	movs	r2, #61	; 0x3d
 800524a:	480b      	ldr	r0, [pc, #44]	; (8005278 <main+0x6c>)
 800524c:	f001 fc7f 	bl	8006b4e <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, statusData, 4);
 8005250:	2204      	movs	r2, #4
 8005252:	490a      	ldr	r1, [pc, #40]	; (800527c <main+0x70>)
 8005254:	4808      	ldr	r0, [pc, #32]	; (8005278 <main+0x6c>)
 8005256:	f001 fd0c 	bl	8006c72 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800525a:	2101      	movs	r1, #1
 800525c:	4808      	ldr	r0, [pc, #32]	; (8005280 <main+0x74>)
 800525e:	f000 fff5 	bl	800624c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005266:	f000 fa89 	bl	800577c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800526a:	e7f6      	b.n	800525a <main+0x4e>
 800526c:	e000ed00 	.word	0xe000ed00
 8005270:	08005000 	.word	0x08005000
 8005274:	080073c0 	.word	0x080073c0
 8005278:	2000003c 	.word	0x2000003c
 800527c:	2000007c 	.word	0x2000007c
 8005280:	40010800 	.word	0x40010800

08005284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	; 0x40
 8005288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800528a:	f107 0318 	add.w	r3, r7, #24
 800528e:	2228      	movs	r2, #40	; 0x28
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f002 f868 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052b4:	2301      	movs	r3, #1
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052b8:	2302      	movs	r3, #2
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80052bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80052c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052c8:	f107 0318 	add.w	r3, r7, #24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 ffd7 	bl	8006280 <HAL_RCC_OscConfig>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80052d8:	f000 f904 	bl	80054e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052dc:	230f      	movs	r3, #15
 80052de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052e0:	2302      	movs	r3, #2
 80052e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80052e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fa42 	bl	8006780 <HAL_RCC_ClockConfig>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005302:	f000 f8ef 	bl	80054e4 <Error_Handler>
  }
}
 8005306:	bf00      	nop
 8005308:	3740      	adds	r7, #64	; 0x40
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <MX_USART1_UART_Init+0x50>)
 8005318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <MX_USART1_UART_Init+0x4c>)
 800531c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005322:	4b0e      	ldr	r3, [pc, #56]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005324:	2200      	movs	r2, #0
 8005326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <MX_USART1_UART_Init+0x4c>)
 800532a:	2200      	movs	r2, #0
 800532c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005336:	220c      	movs	r2, #12
 8005338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <MX_USART1_UART_Init+0x4c>)
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005340:	4b06      	ldr	r3, [pc, #24]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005346:	4805      	ldr	r0, [pc, #20]	; (800535c <MX_USART1_UART_Init+0x4c>)
 8005348:	f001 fbb4 	bl	8006ab4 <HAL_UART_Init>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005352:	f000 f8c7 	bl	80054e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	2000003c 	.word	0x2000003c
 8005360:	40013800 	.word	0x40013800

08005364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <MX_GPIO_Init+0x74>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <MX_GPIO_Init+0x74>)
 800537e:	f043 0320 	orr.w	r3, r3, #32
 8005382:	6193      	str	r3, [r2, #24]
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <MX_GPIO_Init+0x74>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <MX_GPIO_Init+0x74>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <MX_GPIO_Init+0x74>)
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6193      	str	r3, [r2, #24]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <MX_GPIO_Init+0x74>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80053a8:	2200      	movs	r2, #0
 80053aa:	2101      	movs	r1, #1
 80053ac:	480b      	ldr	r0, [pc, #44]	; (80053dc <MX_GPIO_Init+0x78>)
 80053ae:	f000 ff35 	bl	800621c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80053b2:	2301      	movs	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b6:	2301      	movs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053be:	2302      	movs	r3, #2
 80053c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4619      	mov	r1, r3
 80053c8:	4804      	ldr	r0, [pc, #16]	; (80053dc <MX_GPIO_Init+0x78>)
 80053ca:	f000 fda3 	bl	8005f14 <HAL_GPIO_Init>

}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40010800 	.word	0x40010800

080053e0 <GetPage>:

/* USER CODE BEGIN 4 */

// Get the page that contain the specific address
static uint32_t GetPage(uint32_t Address)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e016      	b.n	800541c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80053f4:	3301      	adds	r3, #1
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d20b      	bcs.n	8005416 <GetPage+0x36>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d304      	bcc.n	8005416 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	e006      	b.n	8005424 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b7f      	cmp	r3, #127	; 0x7f
 8005420:	dde5      	ble.n	80053ee <GetPage+0xe>
	  }
  }

  return 0;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
	...

08005430 <Flash_Write_Data>:

// Program Flash memory with start page address
uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8005442:	f000 fbcd 	bl	8005be0 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff ffca 	bl	80053e0 <GetPage>
 800544c:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 800545a:	69f8      	ldr	r0, [r7, #28]
 800545c:	f7ff ffc0 	bl	80053e0 <GetPage>
 8005460:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005462:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <Flash_Write_Data+0xb0>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <Flash_Write_Data+0xb0>)
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	0a9b      	lsrs	r3, r3, #10
 8005476:	3301      	adds	r3, #1
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <Flash_Write_Data+0xb0>)
 800547a:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4619      	mov	r1, r3
 8005482:	4817      	ldr	r0, [pc, #92]	; (80054e0 <Flash_Write_Data+0xb0>)
 8005484:	f000 fc9e 	bl	8005dc4 <HAL_FLASHEx_Erase>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01d      	beq.n	80054ca <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800548e:	f000 fbdd 	bl	8005c4c <HAL_FLASH_GetError>
 8005492:	4603      	mov	r3, r0
 8005494:	e020      	b.n	80054d8 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	2002      	movs	r0, #2
 80054aa:	f000 fb29 	bl	8005b00 <HAL_FLASH_Program>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3304      	adds	r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	3301      	adds	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e003      	b.n	80054ca <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80054c2:	f000 fbc3 	bl	8005c4c <HAL_FLASH_GetError>
 80054c6:	4603      	mov	r3, r0
 80054c8:	e006      	b.n	80054d8 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	429a      	cmp	r2, r3
 80054d0:	dbe1      	blt.n	8005496 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80054d2:	f000 fbab 	bl	8005c2c <HAL_FLASH_Lock>

	   return 0;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3728      	adds	r7, #40	; 0x28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	2000002c 	.word	0x2000002c

080054e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054e8:	b672      	cpsid	i
}
 80054ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054ec:	e7fe      	b.n	80054ec <Error_Handler+0x8>
	...

080054f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054f6:	4b15      	ldr	r3, [pc, #84]	; (800554c <HAL_MspInit+0x5c>)
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_MspInit+0x5c>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6193      	str	r3, [r2, #24]
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_MspInit+0x5c>)
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <HAL_MspInit+0x5c>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <HAL_MspInit+0x5c>)
 8005514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005518:	61d3      	str	r3, [r2, #28]
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_MspInit+0x5c>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_MspInit+0x60>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <HAL_MspInit+0x60>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40021000 	.word	0x40021000
 8005550:	40010000 	.word	0x40010000

08005554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555c:	f107 0310 	add.w	r3, r7, #16
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <HAL_UART_MspInit+0x9c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d139      	bne.n	80055e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005574:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 800557a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800557e:	6193      	str	r3, [r2, #24]
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558c:	4b19      	ldr	r3, [pc, #100]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	6193      	str	r3, [r2, #24]
 8005598:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <HAL_UART_MspInit+0xa0>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055aa:	2302      	movs	r3, #2
 80055ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ae:	2303      	movs	r3, #3
 80055b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b2:	f107 0310 	add.w	r3, r7, #16
 80055b6:	4619      	mov	r1, r3
 80055b8:	480f      	ldr	r0, [pc, #60]	; (80055f8 <HAL_UART_MspInit+0xa4>)
 80055ba:	f000 fcab 	bl	8005f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	4619      	mov	r1, r3
 80055d2:	4809      	ldr	r0, [pc, #36]	; (80055f8 <HAL_UART_MspInit+0xa4>)
 80055d4:	f000 fc9e 	bl	8005f14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	2025      	movs	r0, #37	; 0x25
 80055de:	f000 f9de 	bl	800599e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055e2:	2025      	movs	r0, #37	; 0x25
 80055e4:	f000 f9f7 	bl	80059d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80055e8:	bf00      	nop
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40013800 	.word	0x40013800
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40010800 	.word	0x40010800

080055fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005600:	e7fe      	b.n	8005600 <NMI_Handler+0x4>

08005602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005602:	b480      	push	{r7}
 8005604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005606:	e7fe      	b.n	8005606 <HardFault_Handler+0x4>

08005608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800560c:	e7fe      	b.n	800560c <MemManage_Handler+0x4>

0800560e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005612:	e7fe      	b.n	8005612 <BusFault_Handler+0x4>

08005614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005618:	e7fe      	b.n	8005618 <UsageFault_Handler+0x4>

0800561a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005642:	f000 f87f 	bl	8005744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <USART1_IRQHandler+0x10>)
 8005652:	f001 fb63 	bl	8006d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2000003c 	.word	0x2000003c

08005660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800566c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800566e:	e003      	b.n	8005678 <LoopCopyDataInit>

08005670 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005672:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005674:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005676:	3104      	adds	r1, #4

08005678 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005678:	480a      	ldr	r0, [pc, #40]	; (80056a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800567c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800567e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005680:	d3f6      	bcc.n	8005670 <CopyDataInit>
  ldr r2, =_sbss
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005684:	e002      	b.n	800568c <LoopFillZerobss>

08005686 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005686:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005688:	f842 3b04 	str.w	r3, [r2], #4

0800568c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800568e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005690:	d3f9      	bcc.n	8005686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005692:	f7ff ffe5 	bl	8005660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005696:	f001 fe43 	bl	8007320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800569a:	f7ff fdb7 	bl	800520c <main>
  bx lr
 800569e:	4770      	bx	lr
  ldr r3, =_sidata
 80056a0:	08007430 	.word	0x08007430
  ldr r0, =_sdata
 80056a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80056a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80056ac:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80056b0:	200000a8 	.word	0x200000a8

080056b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056b4:	e7fe      	b.n	80056b4 <ADC1_2_IRQHandler>
	...

080056b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <HAL_Init+0x28>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <HAL_Init+0x28>)
 80056c2:	f043 0310 	orr.w	r3, r3, #16
 80056c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056c8:	2003      	movs	r0, #3
 80056ca:	f000 f95d 	bl	8005988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056ce:	2000      	movs	r0, #0
 80056d0:	f000 f808 	bl	80056e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056d4:	f7ff ff0c 	bl	80054f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40022000 	.word	0x40022000

080056e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056ec:	4b12      	ldr	r3, [pc, #72]	; (8005738 <HAL_InitTick+0x54>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <HAL_InitTick+0x58>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f979 	bl	80059fa <HAL_SYSTICK_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e00e      	b.n	8005730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b0f      	cmp	r3, #15
 8005716:	d80a      	bhi.n	800572e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005718:	2200      	movs	r2, #0
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	f000 f93d 	bl	800599e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <HAL_InitTick+0x5c>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000000 	.word	0x20000000
 800573c:	20000008 	.word	0x20000008
 8005740:	20000004 	.word	0x20000004

08005744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_IncTick+0x1c>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_IncTick+0x20>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4413      	add	r3, r2
 8005754:	4a03      	ldr	r2, [pc, #12]	; (8005764 <HAL_IncTick+0x20>)
 8005756:	6013      	str	r3, [r2, #0]
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000008 	.word	0x20000008
 8005764:	20000084 	.word	0x20000084

08005768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return uwTick;
 800576c:	4b02      	ldr	r3, [pc, #8]	; (8005778 <HAL_GetTick+0x10>)
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	20000084 	.word	0x20000084

0800577c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7ff fff0 	bl	8005768 <HAL_GetTick>
 8005788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d005      	beq.n	80057a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_Delay+0x44>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057a2:	bf00      	nop
 80057a4:	f7ff ffe0 	bl	8005768 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d8f7      	bhi.n	80057a4 <HAL_Delay+0x28>
  {
  }
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000008 	.word	0x20000008

080057c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <__NVIC_SetPriorityGrouping+0x44>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057f6:	4a04      	ldr	r2, [pc, #16]	; (8005808 <__NVIC_SetPriorityGrouping+0x44>)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	60d3      	str	r3, [r2, #12]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	e000ed00 	.word	0xe000ed00

0800580c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <__NVIC_GetPriorityGrouping+0x18>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	f003 0307 	and.w	r3, r3, #7
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	db0b      	blt.n	8005852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 021f 	and.w	r2, r3, #31
 8005840:	4906      	ldr	r1, [pc, #24]	; (800585c <__NVIC_EnableIRQ+0x34>)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	2001      	movs	r0, #1
 800584a:	fa00 f202 	lsl.w	r2, r0, r2
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100

08005860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	6039      	str	r1, [r7, #0]
 800586a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	db0a      	blt.n	800588a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	490c      	ldr	r1, [pc, #48]	; (80058ac <__NVIC_SetPriority+0x4c>)
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	440b      	add	r3, r1
 8005884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005888:	e00a      	b.n	80058a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	4908      	ldr	r1, [pc, #32]	; (80058b0 <__NVIC_SetPriority+0x50>)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	3b04      	subs	r3, #4
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	440b      	add	r3, r1
 800589e:	761a      	strb	r2, [r3, #24]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	e000e100 	.word	0xe000e100
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f1c3 0307 	rsb	r3, r3, #7
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	bf28      	it	cs
 80058d2:	2304      	movcs	r3, #4
 80058d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3304      	adds	r3, #4
 80058da:	2b06      	cmp	r3, #6
 80058dc:	d902      	bls.n	80058e4 <NVIC_EncodePriority+0x30>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3b03      	subs	r3, #3
 80058e2:	e000      	b.n	80058e6 <NVIC_EncodePriority+0x32>
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43da      	mvns	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	401a      	ands	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	43d9      	mvns	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800590c:	4313      	orrs	r3, r2
         );
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800591c:	f3bf 8f4f 	dsb	sy
}
 8005920:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <__NVIC_SystemReset+0x24>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800592a:	4904      	ldr	r1, [pc, #16]	; (800593c <__NVIC_SystemReset+0x24>)
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <__NVIC_SystemReset+0x28>)
 800592e:	4313      	orrs	r3, r2
 8005930:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005932:	f3bf 8f4f 	dsb	sy
}
 8005936:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <__NVIC_SystemReset+0x20>
 800593c:	e000ed00 	.word	0xe000ed00
 8005940:	05fa0004 	.word	0x05fa0004

08005944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3b01      	subs	r3, #1
 8005950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005954:	d301      	bcc.n	800595a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005956:	2301      	movs	r3, #1
 8005958:	e00f      	b.n	800597a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800595a:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <SysTick_Config+0x40>)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3b01      	subs	r3, #1
 8005960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005962:	210f      	movs	r1, #15
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	f7ff ff7a 	bl	8005860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <SysTick_Config+0x40>)
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005972:	4b04      	ldr	r3, [pc, #16]	; (8005984 <SysTick_Config+0x40>)
 8005974:	2207      	movs	r2, #7
 8005976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	e000e010 	.word	0xe000e010

08005988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff17 	bl	80057c4 <__NVIC_SetPriorityGrouping>
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4603      	mov	r3, r0
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059b0:	f7ff ff2c 	bl	800580c <__NVIC_GetPriorityGrouping>
 80059b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	6978      	ldr	r0, [r7, #20]
 80059bc:	f7ff ff7a 	bl	80058b4 <NVIC_EncodePriority>
 80059c0:	4602      	mov	r2, r0
 80059c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c6:	4611      	mov	r1, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff49 	bl	8005860 <__NVIC_SetPriority>
}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	4603      	mov	r3, r0
 80059de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff ff1f 	bl	8005828 <__NVIC_EnableIRQ>
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80059f6:	f7ff ff8f 	bl	8005918 <__NVIC_SystemReset>

080059fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff ff9e 	bl	8005944 <SysTick_Config>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d005      	beq.n	8005a36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e051      	b.n	8005ada <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 020e 	bic.w	r2, r2, #14
 8005a44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_DMA_Abort_IT+0xd0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d029      	beq.n	8005ab4 <HAL_DMA_Abort_IT+0xa0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_DMA_Abort_IT+0xd4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d022      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x9c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_DMA_Abort_IT+0xd8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01a      	beq.n	8005aaa <HAL_DMA_Abort_IT+0x96>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_DMA_Abort_IT+0xdc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d012      	beq.n	8005aa4 <HAL_DMA_Abort_IT+0x90>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_DMA_Abort_IT+0xe0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00a      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x8a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_DMA_Abort_IT+0xe4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d102      	bne.n	8005a98 <HAL_DMA_Abort_IT+0x84>
 8005a92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a96:	e00e      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a9c:	e00b      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aa2:	e008      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa8:	e005      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aae:	e002      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_Abort_IT+0xa2>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4a11      	ldr	r2, [pc, #68]	; (8005afc <HAL_DMA_Abort_IT+0xe8>)
 8005ab8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
    } 
  }
  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40020008 	.word	0x40020008
 8005ae8:	4002001c 	.word	0x4002001c
 8005aec:	40020030 	.word	0x40020030
 8005af0:	40020044 	.word	0x40020044
 8005af4:	40020058 	.word	0x40020058
 8005af8:	4002006c 	.word	0x4002006c
 8005afc:	40020000 	.word	0x40020000

08005b00 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	; (8005bd8 <HAL_FLASH_Program+0xd8>)
 8005b1c:	7e1b      	ldrb	r3, [r3, #24]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_FLASH_Program+0x26>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e054      	b.n	8005bd0 <HAL_FLASH_Program+0xd0>
 8005b26:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_FLASH_Program+0xd8>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b30:	f000 f8b2 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d144      	bne.n	8005bc8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005b44:	2301      	movs	r3, #1
 8005b46:	757b      	strb	r3, [r7, #21]
 8005b48:	e007      	b.n	8005b5a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d102      	bne.n	8005b56 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005b50:	2302      	movs	r3, #2
 8005b52:	757b      	strb	r3, [r7, #21]
 8005b54:	e001      	b.n	8005b5a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005b56:	2304      	movs	r3, #4
 8005b58:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75bb      	strb	r3, [r7, #22]
 8005b5e:	e02d      	b.n	8005bbc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	005a      	lsls	r2, r3, #1
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	eb02 0c03 	add.w	ip, r2, r3
 8005b6a:	7dbb      	ldrb	r3, [r7, #22]
 8005b6c:	0119      	lsls	r1, r3, #4
 8005b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b72:	f1c1 0620 	rsb	r6, r1, #32
 8005b76:	f1a1 0020 	sub.w	r0, r1, #32
 8005b7a:	fa22 f401 	lsr.w	r4, r2, r1
 8005b7e:	fa03 f606 	lsl.w	r6, r3, r6
 8005b82:	4334      	orrs	r4, r6
 8005b84:	fa23 f000 	lsr.w	r0, r3, r0
 8005b88:	4304      	orrs	r4, r0
 8005b8a:	fa23 f501 	lsr.w	r5, r3, r1
 8005b8e:	b2a3      	uxth	r3, r4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4660      	mov	r0, ip
 8005b94:	f000 f864 	bl	8005c60 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b9c:	f000 f87c 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <HAL_FLASH_Program+0xdc>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <HAL_FLASH_Program+0xdc>)
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005bb6:	7dbb      	ldrb	r3, [r7, #22]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	75bb      	strb	r3, [r7, #22]
 8005bbc:	7dba      	ldrb	r2, [r7, #22]
 8005bbe:	7d7b      	ldrb	r3, [r7, #21]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d3cd      	bcc.n	8005b60 <HAL_FLASH_Program+0x60>
 8005bc4:	e000      	b.n	8005bc8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005bc6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <HAL_FLASH_Program+0xd8>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	761a      	strb	r2, [r3, #24]

  return status;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd8:	20000088 	.word	0x20000088
 8005bdc:	40022000 	.word	0x40022000

08005be0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <HAL_FLASH_Unlock+0x40>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <HAL_FLASH_Unlock+0x40>)
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <HAL_FLASH_Unlock+0x44>)
 8005bfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <HAL_FLASH_Unlock+0x40>)
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <HAL_FLASH_Unlock+0x48>)
 8005c00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_FLASH_Unlock+0x40>)
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005c12:	79fb      	ldrb	r3, [r7, #7]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40022000 	.word	0x40022000
 8005c24:	45670123 	.word	0x45670123
 8005c28:	cdef89ab 	.word	0xcdef89ab

08005c2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_FLASH_Lock+0x1c>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <HAL_FLASH_Lock+0x1c>)
 8005c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40022000 	.word	0x40022000

08005c4c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <HAL_FLASH_GetError+0x10>)
 8005c52:	69db      	ldr	r3, [r3, #28]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	20000088 	.word	0x20000088

08005c60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c6c:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <FLASH_Program_HalfWord+0x30>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <FLASH_Program_HalfWord+0x34>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <FLASH_Program_HalfWord+0x34>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	887a      	ldrh	r2, [r7, #2]
 8005c82:	801a      	strh	r2, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000088 	.word	0x20000088
 8005c94:	40022000 	.word	0x40022000

08005c98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005ca0:	f7ff fd62 	bl	8005768 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005ca6:	e010      	b.n	8005cca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d00c      	beq.n	8005cca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <FLASH_WaitForLastOperation+0x2e>
 8005cb6:	f7ff fd57 	bl	8005768 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d201      	bcs.n	8005cca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e025      	b.n	8005d16 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e8      	bne.n	8005ca8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <FLASH_WaitForLastOperation+0x88>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005d0c:	f000 f80a 	bl	8005d24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40022000 	.word	0x40022000

08005d24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005d2e:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f043 0310 	orr.w	r3, r3, #16
 8005d4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f043 0304 	orr.w	r3, r3, #4
 8005d6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	4a0f      	ldr	r2, [pc, #60]	; (8005dc0 <FLASH_SetErrorCode+0x9c>)
 8005d84:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005d86:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f240 1201 	movw	r2, #257	; 0x101
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d106      	bne.n	8005daa <FLASH_SetErrorCode+0x86>
 8005d9c:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4a06      	ldr	r2, [pc, #24]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	61d3      	str	r3, [r2, #28]
}  
 8005da8:	e002      	b.n	8005db0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <FLASH_SetErrorCode+0x98>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60d3      	str	r3, [r2, #12]
}  
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40022000 	.word	0x40022000
 8005dc0:	20000088 	.word	0x20000088

08005dc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_FLASHEx_Erase+0xd0>)
 8005dd8:	7e1b      	ldrb	r3, [r3, #24]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_FLASHEx_Erase+0x1e>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e053      	b.n	8005e8a <HAL_FLASHEx_Erase+0xc6>
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <HAL_FLASHEx_Erase+0xd0>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d116      	bne.n	8005e1e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005df0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005df4:	f7ff ff50 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d141      	bne.n	8005e82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005dfe:	2001      	movs	r0, #1
 8005e00:	f000 f84c 	bl	8005e9c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e08:	f7ff ff46 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005e10:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <HAL_FLASHEx_Erase+0xd4>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <HAL_FLASHEx_Erase+0xd4>)
 8005e16:	f023 0304 	bic.w	r3, r3, #4
 8005e1a:	6113      	str	r3, [r2, #16]
 8005e1c:	e031      	b.n	8005e82 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e22:	f7ff ff39 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d12a      	bne.n	8005e82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	e019      	b.n	8005e70 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005e3c:	68b8      	ldr	r0, [r7, #8]
 8005e3e:	f000 f849 	bl	8005ed4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e46:	f7ff ff27 	bl	8005c98 <FLASH_WaitForLastOperation>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_FLASHEx_Erase+0xd4>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <HAL_FLASHEx_Erase+0xd4>)
 8005e54:	f023 0302 	bic.w	r3, r3, #2
 8005e58:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	601a      	str	r2, [r3, #0]
            break;
 8005e66:	e00c      	b.n	8005e82 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	029a      	lsls	r2, r3, #10
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3dc      	bcc.n	8005e3c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e82:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <HAL_FLASHEx_Erase+0xd0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	761a      	strb	r2, [r3, #24]

  return status;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000088 	.word	0x20000088
 8005e98:	40022000 	.word	0x40022000

08005e9c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <FLASH_MassErase+0x30>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <FLASH_MassErase+0x34>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <FLASH_MassErase+0x34>)
 8005eb0:	f043 0304 	orr.w	r3, r3, #4
 8005eb4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <FLASH_MassErase+0x34>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <FLASH_MassErase+0x34>)
 8005ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	20000088 	.word	0x20000088
 8005ed0:	40022000 	.word	0x40022000

08005ed4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <FLASH_PageErase+0x38>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <FLASH_PageErase+0x3c>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <FLASH_PageErase+0x3c>)
 8005ee8:	f043 0302 	orr.w	r3, r3, #2
 8005eec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <FLASH_PageErase+0x3c>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <FLASH_PageErase+0x3c>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <FLASH_PageErase+0x3c>)
 8005efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000088 	.word	0x20000088
 8005f10:	40022000 	.word	0x40022000

08005f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b08b      	sub	sp, #44	; 0x2c
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f22:	2300      	movs	r3, #0
 8005f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f26:	e169      	b.n	80061fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f28:	2201      	movs	r2, #1
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f040 8158 	bne.w	80061f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4a9a      	ldr	r2, [pc, #616]	; (80061b4 <HAL_GPIO_Init+0x2a0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d05e      	beq.n	800600e <HAL_GPIO_Init+0xfa>
 8005f50:	4a98      	ldr	r2, [pc, #608]	; (80061b4 <HAL_GPIO_Init+0x2a0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d875      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f56:	4a98      	ldr	r2, [pc, #608]	; (80061b8 <HAL_GPIO_Init+0x2a4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d058      	beq.n	800600e <HAL_GPIO_Init+0xfa>
 8005f5c:	4a96      	ldr	r2, [pc, #600]	; (80061b8 <HAL_GPIO_Init+0x2a4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d86f      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f62:	4a96      	ldr	r2, [pc, #600]	; (80061bc <HAL_GPIO_Init+0x2a8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d052      	beq.n	800600e <HAL_GPIO_Init+0xfa>
 8005f68:	4a94      	ldr	r2, [pc, #592]	; (80061bc <HAL_GPIO_Init+0x2a8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d869      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f6e:	4a94      	ldr	r2, [pc, #592]	; (80061c0 <HAL_GPIO_Init+0x2ac>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04c      	beq.n	800600e <HAL_GPIO_Init+0xfa>
 8005f74:	4a92      	ldr	r2, [pc, #584]	; (80061c0 <HAL_GPIO_Init+0x2ac>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d863      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f7a:	4a92      	ldr	r2, [pc, #584]	; (80061c4 <HAL_GPIO_Init+0x2b0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d046      	beq.n	800600e <HAL_GPIO_Init+0xfa>
 8005f80:	4a90      	ldr	r2, [pc, #576]	; (80061c4 <HAL_GPIO_Init+0x2b0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d85d      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f86:	2b12      	cmp	r3, #18
 8005f88:	d82a      	bhi.n	8005fe0 <HAL_GPIO_Init+0xcc>
 8005f8a:	2b12      	cmp	r3, #18
 8005f8c:	d859      	bhi.n	8006042 <HAL_GPIO_Init+0x12e>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <HAL_GPIO_Init+0x80>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	0800600f 	.word	0x0800600f
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005ffb 	.word	0x08005ffb
 8005fa0:	0800603d 	.word	0x0800603d
 8005fa4:	08006043 	.word	0x08006043
 8005fa8:	08006043 	.word	0x08006043
 8005fac:	08006043 	.word	0x08006043
 8005fb0:	08006043 	.word	0x08006043
 8005fb4:	08006043 	.word	0x08006043
 8005fb8:	08006043 	.word	0x08006043
 8005fbc:	08006043 	.word	0x08006043
 8005fc0:	08006043 	.word	0x08006043
 8005fc4:	08006043 	.word	0x08006043
 8005fc8:	08006043 	.word	0x08006043
 8005fcc:	08006043 	.word	0x08006043
 8005fd0:	08006043 	.word	0x08006043
 8005fd4:	08006043 	.word	0x08006043
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	4a79      	ldr	r2, [pc, #484]	; (80061c8 <HAL_GPIO_Init+0x2b4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005fe6:	e02c      	b.n	8006042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	623b      	str	r3, [r7, #32]
          break;
 8005fee:	e029      	b.n	8006044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	623b      	str	r3, [r7, #32]
          break;
 8005ff8:	e024      	b.n	8006044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	3308      	adds	r3, #8
 8006000:	623b      	str	r3, [r7, #32]
          break;
 8006002:	e01f      	b.n	8006044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	330c      	adds	r3, #12
 800600a:	623b      	str	r3, [r7, #32]
          break;
 800600c:	e01a      	b.n	8006044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006016:	2304      	movs	r3, #4
 8006018:	623b      	str	r3, [r7, #32]
          break;
 800601a:	e013      	b.n	8006044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006024:	2308      	movs	r3, #8
 8006026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	611a      	str	r2, [r3, #16]
          break;
 800602e:	e009      	b.n	8006044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006030:	2308      	movs	r3, #8
 8006032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	615a      	str	r2, [r3, #20]
          break;
 800603a:	e003      	b.n	8006044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800603c:	2300      	movs	r3, #0
 800603e:	623b      	str	r3, [r7, #32]
          break;
 8006040:	e000      	b.n	8006044 <HAL_GPIO_Init+0x130>
          break;
 8006042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2bff      	cmp	r3, #255	; 0xff
 8006048:	d801      	bhi.n	800604e <HAL_GPIO_Init+0x13a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	e001      	b.n	8006052 <HAL_GPIO_Init+0x13e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2bff      	cmp	r3, #255	; 0xff
 8006058:	d802      	bhi.n	8006060 <HAL_GPIO_Init+0x14c>
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	e002      	b.n	8006066 <HAL_GPIO_Init+0x152>
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	3b08      	subs	r3, #8
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	210f      	movs	r1, #15
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	6a39      	ldr	r1, [r7, #32]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80b1 	beq.w	80061f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006094:	4b4d      	ldr	r3, [pc, #308]	; (80061cc <HAL_GPIO_Init+0x2b8>)
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	4a4c      	ldr	r2, [pc, #304]	; (80061cc <HAL_GPIO_Init+0x2b8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6193      	str	r3, [r2, #24]
 80060a0:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <HAL_GPIO_Init+0x2b8>)
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060ac:	4a48      	ldr	r2, [pc, #288]	; (80061d0 <HAL_GPIO_Init+0x2bc>)
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	3302      	adds	r3, #2
 80060b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	220f      	movs	r2, #15
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <HAL_GPIO_Init+0x2c0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_GPIO_Init+0x1ec>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <HAL_GPIO_Init+0x2c4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00d      	beq.n	80060fc <HAL_GPIO_Init+0x1e8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3e      	ldr	r2, [pc, #248]	; (80061dc <HAL_GPIO_Init+0x2c8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <HAL_GPIO_Init+0x1e4>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <HAL_GPIO_Init+0x2cc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <HAL_GPIO_Init+0x1e0>
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <HAL_GPIO_Init+0x1ee>
 80060f4:	2304      	movs	r3, #4
 80060f6:	e004      	b.n	8006102 <HAL_GPIO_Init+0x1ee>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e002      	b.n	8006102 <HAL_GPIO_Init+0x1ee>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_GPIO_Init+0x1ee>
 8006100:	2300      	movs	r3, #0
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	f002 0203 	and.w	r2, r2, #3
 8006108:	0092      	lsls	r2, r2, #2
 800610a:	4093      	lsls	r3, r2
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006112:	492f      	ldr	r1, [pc, #188]	; (80061d0 <HAL_GPIO_Init+0x2bc>)
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	3302      	adds	r3, #2
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800612c:	4b2d      	ldr	r3, [pc, #180]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	492c      	ldr	r1, [pc, #176]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
 8006138:	e006      	b.n	8006148 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800613a:	4b2a      	ldr	r3, [pc, #168]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	43db      	mvns	r3, r3
 8006142:	4928      	ldr	r1, [pc, #160]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006144:	4013      	ands	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006154:	4b23      	ldr	r3, [pc, #140]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	4922      	ldr	r1, [pc, #136]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]
 8006160:	e006      	b.n	8006170 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	43db      	mvns	r3, r3
 800616a:	491e      	ldr	r1, [pc, #120]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800616c:	4013      	ands	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d006      	beq.n	800618a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	4918      	ldr	r1, [pc, #96]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4313      	orrs	r3, r2
 8006186:	608b      	str	r3, [r1, #8]
 8006188:	e006      	b.n	8006198 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	43db      	mvns	r3, r3
 8006192:	4914      	ldr	r1, [pc, #80]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 8006194:	4013      	ands	r3, r2
 8006196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d021      	beq.n	80061e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	490e      	ldr	r1, [pc, #56]	; (80061e4 <HAL_GPIO_Init+0x2d0>)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60cb      	str	r3, [r1, #12]
 80061b0:	e021      	b.n	80061f6 <HAL_GPIO_Init+0x2e2>
 80061b2:	bf00      	nop
 80061b4:	10320000 	.word	0x10320000
 80061b8:	10310000 	.word	0x10310000
 80061bc:	10220000 	.word	0x10220000
 80061c0:	10210000 	.word	0x10210000
 80061c4:	10120000 	.word	0x10120000
 80061c8:	10110000 	.word	0x10110000
 80061cc:	40021000 	.word	0x40021000
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010800 	.word	0x40010800
 80061d8:	40010c00 	.word	0x40010c00
 80061dc:	40011000 	.word	0x40011000
 80061e0:	40011400 	.word	0x40011400
 80061e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_GPIO_Init+0x304>)
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	43db      	mvns	r3, r3
 80061f0:	4909      	ldr	r1, [pc, #36]	; (8006218 <HAL_GPIO_Init+0x304>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	3301      	adds	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f ae8e 	bne.w	8005f28 <HAL_GPIO_Init+0x14>
  }
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	372c      	adds	r7, #44	; 0x2c
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr
 8006218:	40010400 	.word	0x40010400

0800621c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	807b      	strh	r3, [r7, #2]
 8006228:	4613      	mov	r3, r2
 800622a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800622c:	787b      	ldrb	r3, [r7, #1]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006238:	e003      	b.n	8006242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800623a:	887b      	ldrh	r3, [r7, #2]
 800623c:	041a      	lsls	r2, r3, #16
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	611a      	str	r2, [r3, #16]
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800625e:	887a      	ldrh	r2, [r7, #2]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4013      	ands	r3, r2
 8006264:	041a      	lsls	r2, r3, #16
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	43d9      	mvns	r1, r3
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	400b      	ands	r3, r1
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	611a      	str	r2, [r3, #16]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
	...

08006280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e26c      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8087 	beq.w	80063ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a0:	4b92      	ldr	r3, [pc, #584]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d00c      	beq.n	80062c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062ac:	4b8f      	ldr	r3, [pc, #572]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d112      	bne.n	80062de <HAL_RCC_OscConfig+0x5e>
 80062b8:	4b8c      	ldr	r3, [pc, #560]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d10b      	bne.n	80062de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c6:	4b89      	ldr	r3, [pc, #548]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d06c      	beq.n	80063ac <HAL_RCC_OscConfig+0x12c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d168      	bne.n	80063ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e246      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e6:	d106      	bne.n	80062f6 <HAL_RCC_OscConfig+0x76>
 80062e8:	4b80      	ldr	r3, [pc, #512]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a7f      	ldr	r2, [pc, #508]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e02e      	b.n	8006354 <HAL_RCC_OscConfig+0xd4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0x98>
 80062fe:	4b7b      	ldr	r3, [pc, #492]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7a      	ldr	r2, [pc, #488]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b78      	ldr	r3, [pc, #480]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a77      	ldr	r2, [pc, #476]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e01d      	b.n	8006354 <HAL_RCC_OscConfig+0xd4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0xbc>
 8006322:	4b72      	ldr	r3, [pc, #456]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a71      	ldr	r2, [pc, #452]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b6f      	ldr	r3, [pc, #444]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a6e      	ldr	r2, [pc, #440]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e00b      	b.n	8006354 <HAL_RCC_OscConfig+0xd4>
 800633c:	4b6b      	ldr	r3, [pc, #428]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6a      	ldr	r2, [pc, #424]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4b68      	ldr	r3, [pc, #416]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a67      	ldr	r2, [pc, #412]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 800634e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d013      	beq.n	8006384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7ff fa04 	bl	8005768 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006364:	f7ff fa00 	bl	8005768 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	; 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e1fa      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b5d      	ldr	r3, [pc, #372]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0xe4>
 8006382:	e014      	b.n	80063ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006384:	f7ff f9f0 	bl	8005768 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800638c:	f7ff f9ec 	bl	8005768 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	; 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e1e6      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x10c>
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d063      	beq.n	8006482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063ba:	4b4c      	ldr	r3, [pc, #304]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063c6:	4b49      	ldr	r3, [pc, #292]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d11c      	bne.n	800640c <HAL_RCC_OscConfig+0x18c>
 80063d2:	4b46      	ldr	r3, [pc, #280]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d116      	bne.n	800640c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <HAL_RCC_OscConfig+0x176>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d001      	beq.n	80063f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e1ba      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4939      	ldr	r1, [pc, #228]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640a:	e03a      	b.n	8006482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d020      	beq.n	8006456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006414:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7ff f9a5 	bl	8005768 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006422:	f7ff f9a1 	bl	8005768 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e19b      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	4b2d      	ldr	r3, [pc, #180]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006440:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	4927      	ldr	r1, [pc, #156]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006450:	4313      	orrs	r3, r2
 8006452:	600b      	str	r3, [r1, #0]
 8006454:	e015      	b.n	8006482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645c:	f7ff f984 	bl	8005768 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006464:	f7ff f980 	bl	8005768 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e17a      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d03a      	beq.n	8006504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d019      	beq.n	80064ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <HAL_RCC_OscConfig+0x274>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649c:	f7ff f964 	bl	8005768 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a4:	f7ff f960 	bl	8005768 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e15a      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <HAL_RCC_OscConfig+0x26c>)
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064c2:	2001      	movs	r0, #1
 80064c4:	f000 fad8 	bl	8006a78 <RCC_Delay>
 80064c8:	e01c      	b.n	8006504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <HAL_RCC_OscConfig+0x274>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d0:	f7ff f94a 	bl	8005768 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d6:	e00f      	b.n	80064f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d8:	f7ff f946 	bl	8005768 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d908      	bls.n	80064f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e140      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
 80064ea:	bf00      	nop
 80064ec:	40021000 	.word	0x40021000
 80064f0:	42420000 	.word	0x42420000
 80064f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b9e      	ldr	r3, [pc, #632]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e9      	bne.n	80064d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a6 	beq.w	800665e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b97      	ldr	r3, [pc, #604]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	4b94      	ldr	r3, [pc, #592]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	4a93      	ldr	r2, [pc, #588]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	61d3      	str	r3, [r2, #28]
 800652e:	4b91      	ldr	r3, [pc, #580]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653e:	4b8e      	ldr	r3, [pc, #568]	; (8006778 <HAL_RCC_OscConfig+0x4f8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d118      	bne.n	800657c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654a:	4b8b      	ldr	r3, [pc, #556]	; (8006778 <HAL_RCC_OscConfig+0x4f8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a8a      	ldr	r2, [pc, #552]	; (8006778 <HAL_RCC_OscConfig+0x4f8>)
 8006550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006556:	f7ff f907 	bl	8005768 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655e:	f7ff f903 	bl	8005768 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b64      	cmp	r3, #100	; 0x64
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0fd      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	4b81      	ldr	r3, [pc, #516]	; (8006778 <HAL_RCC_OscConfig+0x4f8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d106      	bne.n	8006592 <HAL_RCC_OscConfig+0x312>
 8006584:	4b7b      	ldr	r3, [pc, #492]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	4a7a      	ldr	r2, [pc, #488]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	6213      	str	r3, [r2, #32]
 8006590:	e02d      	b.n	80065ee <HAL_RCC_OscConfig+0x36e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10c      	bne.n	80065b4 <HAL_RCC_OscConfig+0x334>
 800659a:	4b76      	ldr	r3, [pc, #472]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	4a75      	ldr	r2, [pc, #468]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	6213      	str	r3, [r2, #32]
 80065a6:	4b73      	ldr	r3, [pc, #460]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4a72      	ldr	r2, [pc, #456]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	6213      	str	r3, [r2, #32]
 80065b2:	e01c      	b.n	80065ee <HAL_RCC_OscConfig+0x36e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d10c      	bne.n	80065d6 <HAL_RCC_OscConfig+0x356>
 80065bc:	4b6d      	ldr	r3, [pc, #436]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	4a6c      	ldr	r2, [pc, #432]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	6213      	str	r3, [r2, #32]
 80065c8:	4b6a      	ldr	r3, [pc, #424]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	4a69      	ldr	r2, [pc, #420]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	6213      	str	r3, [r2, #32]
 80065d4:	e00b      	b.n	80065ee <HAL_RCC_OscConfig+0x36e>
 80065d6:	4b67      	ldr	r3, [pc, #412]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	4a66      	ldr	r2, [pc, #408]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	6213      	str	r3, [r2, #32]
 80065e2:	4b64      	ldr	r3, [pc, #400]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4a63      	ldr	r2, [pc, #396]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f6:	f7ff f8b7 	bl	8005768 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7ff f8b3 	bl	8005768 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e0ab      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006614:	4b57      	ldr	r3, [pc, #348]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ee      	beq.n	80065fe <HAL_RCC_OscConfig+0x37e>
 8006620:	e014      	b.n	800664c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006622:	f7ff f8a1 	bl	8005768 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006628:	e00a      	b.n	8006640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7ff f89d 	bl	8005768 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f241 3288 	movw	r2, #5000	; 0x1388
 8006638:	4293      	cmp	r3, r2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e095      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006640:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ee      	bne.n	800662a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d105      	bne.n	800665e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006652:	4b48      	ldr	r3, [pc, #288]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4a47      	ldr	r2, [pc, #284]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8081 	beq.w	800676a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006668:	4b42      	ldr	r3, [pc, #264]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f003 030c 	and.w	r3, r3, #12
 8006670:	2b08      	cmp	r3, #8
 8006672:	d061      	beq.n	8006738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d146      	bne.n	800670a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667c:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_RCC_OscConfig+0x4fc>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7ff f871 	bl	8005768 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668a:	f7ff f86d 	bl	8005768 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e067      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800669c:	4b35      	ldr	r3, [pc, #212]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f0      	bne.n	800668a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b0:	d108      	bne.n	80066c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066b2:	4b30      	ldr	r3, [pc, #192]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	492d      	ldr	r1, [pc, #180]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a19      	ldr	r1, [r3, #32]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	430b      	orrs	r3, r1
 80066d6:	4927      	ldr	r1, [pc, #156]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066dc:	4b27      	ldr	r3, [pc, #156]	; (800677c <HAL_RCC_OscConfig+0x4fc>)
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e2:	f7ff f841 	bl	8005768 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ea:	f7ff f83d 	bl	8005768 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e037      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x46a>
 8006708:	e02f      	b.n	800676a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_RCC_OscConfig+0x4fc>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7ff f82a 	bl	8005768 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006718:	f7ff f826 	bl	8005768 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e020      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x498>
 8006736:	e018      	b.n	800676a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e013      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCC_OscConfig+0x4f4>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	429a      	cmp	r2, r3
 8006756:	d106      	bne.n	8006766 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006762:	429a      	cmp	r2, r3
 8006764:	d001      	beq.n	800676a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40021000 	.word	0x40021000
 8006778:	40007000 	.word	0x40007000
 800677c:	42420060 	.word	0x42420060

08006780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0d0      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006794:	4b6a      	ldr	r3, [pc, #424]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d910      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b67      	ldr	r3, [pc, #412]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 0207 	bic.w	r2, r3, #7
 80067aa:	4965      	ldr	r1, [pc, #404]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b63      	ldr	r3, [pc, #396]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0b8      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067dc:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a52      	ldr	r2, [pc, #328]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b50      	ldr	r3, [pc, #320]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	494d      	ldr	r1, [pc, #308]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800680e:	4313      	orrs	r3, r2
 8006810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d040      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d115      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e07f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d107      	bne.n	800684e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683e:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e073      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684e:	4b3d      	ldr	r3, [pc, #244]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e06b      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685e:	4b39      	ldr	r3, [pc, #228]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f023 0203 	bic.w	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4936      	ldr	r1, [pc, #216]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006870:	f7fe ff7a 	bl	8005768 <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	e00a      	b.n	800688e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006878:	f7fe ff76 	bl	8005768 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e053      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 020c 	and.w	r2, r3, #12
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	429a      	cmp	r2, r3
 800689e:	d1eb      	bne.n	8006878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068a0:	4b27      	ldr	r3, [pc, #156]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d210      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 0207 	bic.w	r2, r3, #7
 80068b6:	4922      	ldr	r1, [pc, #136]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e032      	b.n	8006936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4916      	ldr	r1, [pc, #88]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	490e      	ldr	r1, [pc, #56]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800690e:	f000 f821 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	490a      	ldr	r1, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x1c8>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1cc>)
 8006928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x1d0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fed8 	bl	80056e4 <HAL_InitTick>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40022000 	.word	0x40022000
 8006944:	40021000 	.word	0x40021000
 8006948:	08007410 	.word	0x08007410
 800694c:	20000000 	.word	0x20000000
 8006950:	20000004 	.word	0x20000004

08006954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b490      	push	{r4, r7}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800695a:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xb0>)
 800695c:	1d3c      	adds	r4, r7, #4
 800695e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006964:	f240 2301 	movw	r3, #513	; 0x201
 8006968:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800697e:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b04      	cmp	r3, #4
 800698c:	d002      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0x40>
 800698e:	2b08      	cmp	r3, #8
 8006990:	d003      	beq.n	800699a <HAL_RCC_GetSysClockFreq+0x46>
 8006992:	e02d      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006994:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006996:	623b      	str	r3, [r7, #32]
      break;
 8006998:	e02d      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	0c9b      	lsrs	r3, r3, #18
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069a6:	4413      	add	r3, r2
 80069a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d013      	beq.n	80069e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0c5b      	lsrs	r3, r3, #17
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069c6:	4413      	add	r3, r2
 80069c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d2:	fb02 f203 	mul.w	r2, r2, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	e004      	b.n	80069ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	4a0b      	ldr	r2, [pc, #44]	; (8006a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	623b      	str	r3, [r7, #32]
      break;
 80069ee:	e002      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069f2:	623b      	str	r3, [r7, #32]
      break;
 80069f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f6:	6a3b      	ldr	r3, [r7, #32]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3728      	adds	r7, #40	; 0x28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc90      	pop	{r4, r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	08007400 	.word	0x08007400
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	007a1200 	.word	0x007a1200
 8006a10:	003d0900 	.word	0x003d0900

08006a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	20000000 	.word	0x20000000

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a2c:	f7ff fff2 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4903      	ldr	r1, [pc, #12]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	08007420 	.word	0x08007420

08006a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a54:	f7ff ffde 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	0adb      	lsrs	r3, r3, #11
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4903      	ldr	r1, [pc, #12]	; (8006a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40021000 	.word	0x40021000
 8006a74:	08007420 	.word	0x08007420

08006a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a80:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <RCC_Delay+0x34>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <RCC_Delay+0x38>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	0a5b      	lsrs	r3, r3, #9
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a94:	bf00      	nop
  }
  while (Delay --);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	60fa      	str	r2, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f9      	bne.n	8006a94 <RCC_Delay+0x1c>
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	20000000 	.word	0x20000000
 8006ab0:	10624dd3 	.word	0x10624dd3

08006ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e03f      	b.n	8006b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fe fd3a 	bl	8005554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2224      	movs	r2, #36	; 0x24
 8006ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb83 	bl	8007204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695a      	ldr	r2, [r3, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b08a      	sub	sp, #40	; 0x28
 8006b52:	af02      	add	r7, sp, #8
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d17c      	bne.n	8006c68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_UART_Transmit+0x2c>
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e075      	b.n	8006c6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Transmit+0x3e>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e06e      	b.n	8006c6a <HAL_UART_Transmit+0x11c>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2221      	movs	r2, #33	; 0x21
 8006b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006ba2:	f7fe fde1 	bl	8005768 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d108      	bne.n	8006bd0 <HAL_UART_Transmit+0x82>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e003      	b.n	8006bd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006be0:	e02a      	b.n	8006c38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2180      	movs	r1, #128	; 0x80
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f9a7 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e036      	b.n	8006c6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	3302      	adds	r3, #2
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	e007      	b.n	8006c2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	3301      	adds	r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1cf      	bne.n	8006be2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2140      	movs	r1, #64	; 0x40
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f977 	bl	8006f40 <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e006      	b.n	8006c6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d140      	bne.n	8006d0e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Receive_IT+0x26>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e039      	b.n	8006d10 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Receive_IT+0x38>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e032      	b.n	8006d10 <HAL_UART_Receive_IT+0x9e>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	88fa      	ldrh	r2, [r7, #6]
 8006cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2222      	movs	r2, #34	; 0x22
 8006cce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
	...

08006d1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x52>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9cc 	bl	8007104 <UART_Receive_IT>
      return;
 8006d6c:	e0d0      	b.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80b0 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x1ba>
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <HAL_UART_IRQHandler+0x70>
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80a5 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <HAL_UART_IRQHandler+0x90>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_UART_IRQHandler+0xb0>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	f043 0202 	orr.w	r2, r3, #2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_UART_IRQHandler+0xd0>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	f043 0204 	orr.w	r2, r3, #4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <HAL_UART_IRQHandler+0xfa>
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <HAL_UART_IRQHandler+0xee>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d077      	beq.n	8006f0e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <HAL_UART_IRQHandler+0x11c>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f966 	bl	8007104 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <HAL_UART_IRQHandler+0x144>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d031      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8b7 	bl	8006fd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d023      	beq.n	8006ebc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d013      	beq.n	8006eb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <HAL_UART_IRQHandler+0x1fc>)
 8006e92:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fdbb 	bl	8005a14 <HAL_DMA_Abort_IT>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	e00e      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f83a 	bl	8006f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e00a      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f836 	bl	8006f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	e006      	b.n	8006ed2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f832 	bl	8006f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006ed0:	e01d      	b.n	8006f0e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed2:	bf00      	nop
    return;
 8006ed4:	e01b      	b.n	8006f0e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d008      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1d6>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8a3 	bl	8007036 <UART_Transmit_IT>
    return;
 8006ef0:	e00e      	b.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8e4 	bl	80070d4 <UART_EndTransmit_IT>
    return;
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006f0e:	bf00      	nop
  }
}
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0800700f 	.word	0x0800700f

08006f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f50:	e02c      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d028      	beq.n	8006fac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f60:	f7fe fc02 	bl	8005768 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d21d      	bcs.n	8006fac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e00f      	b.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	bf0c      	ite	eq
 8006fbc:	2301      	moveq	r3, #1
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d0c3      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695a      	ldr	r2, [r3, #20]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr

0800700e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff ff80 	bl	8006f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b21      	cmp	r3, #33	; 0x21
 8007048:	d13e      	bne.n	80070c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007052:	d114      	bne.n	800707e <UART_Transmit_IT+0x48>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d110      	bne.n	800707e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	621a      	str	r2, [r3, #32]
 800707c:	e008      	b.n	8007090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6211      	str	r1, [r2, #32]
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4619      	mov	r1, r3
 800709e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10f      	bne.n	80070c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff11 	bl	8006f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b22      	cmp	r3, #34	; 0x22
 8007116:	d170      	bne.n	80071fa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d117      	bne.n	8007152 <UART_Receive_IT+0x4e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d113      	bne.n	8007152 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007140:	b29a      	uxth	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
 8007150:	e026      	b.n	80071a0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	d007      	beq.n	8007176 <UART_Receive_IT+0x72>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <UART_Receive_IT+0x80>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e008      	b.n	8007196 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4619      	mov	r1, r3
 80071ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d120      	bne.n	80071f6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0220 	bic.w	r2, r2, #32
 80071c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695a      	ldr	r2, [r3, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fd ffb7 	bl	8005160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e002      	b.n	80071fc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800723e:	f023 030c 	bic.w	r3, r3, #12
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	430b      	orrs	r3, r1
 800724a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2c      	ldr	r2, [pc, #176]	; (8007318 <UART_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d103      	bne.n	8007274 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800726c:	f7ff fbf0 	bl	8006a50 <HAL_RCC_GetPCLK2Freq>
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	e002      	b.n	800727a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7ff fbd8 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8007278:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009a      	lsls	r2, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	4a22      	ldr	r2, [pc, #136]	; (800731c <UART_SetConfig+0x118>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	0119      	lsls	r1, r3, #4
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009a      	lsls	r2, r3, #2
 80072a4:	441a      	add	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80072b0:	4b1a      	ldr	r3, [pc, #104]	; (800731c <UART_SetConfig+0x118>)
 80072b2:	fba3 0302 	umull	r0, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	2064      	movs	r0, #100	; 0x64
 80072ba:	fb00 f303 	mul.w	r3, r0, r3
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	3332      	adds	r3, #50	; 0x32
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <UART_SetConfig+0x118>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072d0:	4419      	add	r1, r3
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009a      	lsls	r2, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <UART_SetConfig+0x118>)
 80072ea:	fba3 0302 	umull	r0, r3, r3, r2
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2064      	movs	r0, #100	; 0x64
 80072f2:	fb00 f303 	mul.w	r3, r0, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	3332      	adds	r3, #50	; 0x32
 80072fc:	4a07      	ldr	r2, [pc, #28]	; (800731c <UART_SetConfig+0x118>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	440a      	add	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40013800 	.word	0x40013800
 800731c:	51eb851f 	.word	0x51eb851f

08007320 <__libc_init_array>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	2600      	movs	r6, #0
 8007324:	4d0c      	ldr	r5, [pc, #48]	; (8007358 <__libc_init_array+0x38>)
 8007326:	4c0d      	ldr	r4, [pc, #52]	; (800735c <__libc_init_array+0x3c>)
 8007328:	1b64      	subs	r4, r4, r5
 800732a:	10a4      	asrs	r4, r4, #2
 800732c:	42a6      	cmp	r6, r4
 800732e:	d109      	bne.n	8007344 <__libc_init_array+0x24>
 8007330:	f000 f822 	bl	8007378 <_init>
 8007334:	2600      	movs	r6, #0
 8007336:	4d0a      	ldr	r5, [pc, #40]	; (8007360 <__libc_init_array+0x40>)
 8007338:	4c0a      	ldr	r4, [pc, #40]	; (8007364 <__libc_init_array+0x44>)
 800733a:	1b64      	subs	r4, r4, r5
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	42a6      	cmp	r6, r4
 8007340:	d105      	bne.n	800734e <__libc_init_array+0x2e>
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	f855 3b04 	ldr.w	r3, [r5], #4
 8007348:	4798      	blx	r3
 800734a:	3601      	adds	r6, #1
 800734c:	e7ee      	b.n	800732c <__libc_init_array+0xc>
 800734e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007352:	4798      	blx	r3
 8007354:	3601      	adds	r6, #1
 8007356:	e7f2      	b.n	800733e <__libc_init_array+0x1e>
 8007358:	08007428 	.word	0x08007428
 800735c:	08007428 	.word	0x08007428
 8007360:	08007428 	.word	0x08007428
 8007364:	0800742c 	.word	0x0800742c

08007368 <memset>:
 8007368:	4603      	mov	r3, r0
 800736a:	4402      	add	r2, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <_init>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr

08007384 <_fini>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr
